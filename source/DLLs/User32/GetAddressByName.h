void *
GetAddressByName
(const char *name)
{
	if (NULL == name) return NULL;
	else if (0 == strcmp(name, "ActivateKeyboardLayout")) return (void *)ActivateKeyboardLayout;
	else if (0 == strcmp(name, "AdjustWindowRect")) return (void *)AdjustWindowRect;
	else if (0 == strcmp(name, "AdjustWindowRectEx")) return (void *)AdjustWindowRectEx;
	else if (0 == strcmp(name, "AnyPopup")) return (void *)AnyPopup;
	else if (0 == strcmp(name, "AppendMenuA")) return (void *)AppendMenuA;
	else if (0 == strcmp(name, "AppendMenuW")) return (void *)AppendMenuW;
	else if (0 == strcmp(name, "ArrangeIconicWindows")) return (void *)ArrangeIconicWindows;
	else if (0 == strcmp(name, "AttachThreadInput")) return (void *)AttachThreadInput;
	else if (0 == strcmp(name, "BeginDeferWindowPos")) return (void *)BeginDeferWindowPos;
	else if (0 == strcmp(name, "BeginPaint")) return (void *)BeginPaint;
	else if (0 == strcmp(name, "BringWindowToTop")) return (void *)BringWindowToTop;
	else if (0 == strcmp(name, "BroadcastSystemMessage")) return (void *)BroadcastSystemMessage;
	else if (0 == strcmp(name, "CallMsgFilter")) return (void *)CallMsgFilter;
	else if (0 == strcmp(name, "CallNextHookEx")) return (void *)CallNextHookEx;
	else if (0 == strcmp(name, "CallWindowProcA")) return (void *)CallWindowProcA;
	else if (0 == strcmp(name, "CallWindowProcW")) return (void *)CallWindowProcW;
	else if (0 == strcmp(name, "CascadeWindows")) return (void *)CascadeWindows;
	else if (0 == strcmp(name, "ChangeClipboardChain")) return (void *)ChangeClipboardChain;
	else if (0 == strcmp(name, "ChangeDisplaySettingsA")) return (void *)ChangeDisplaySettingsA;
	else if (0 == strcmp(name, "ChangeDisplaySettingsW")) return (void *)ChangeDisplaySettingsW;
	else if (0 == strcmp(name, "ChangeMenuA")) return (void *)ChangeMenuA;
	else if (0 == strcmp(name, "ChangeMenuW")) return (void *)ChangeMenuW;
	else if (0 == strcmp(name, "CharLowerA")) return (void *)CharLowerA;
	else if (0 == strcmp(name, "CharLowerBuffA")) return (void *)CharLowerBuffA;
	else if (0 == strcmp(name, "CharLowerBuffW")) return (void *)CharLowerBuffW;
	else if (0 == strcmp(name, "CharLowerW")) return (void *)CharLowerW;
	else if (0 == strcmp(name, "CharNextA")) return (void *)CharNextA;
	else if (0 == strcmp(name, "CharNextExA")) return (void *)CharNextExA;
	else if (0 == strcmp(name, "CharNextW")) return (void *)CharNextW;
	else if (0 == strcmp(name, "CharPrevA")) return (void *)CharPrevA;
	else if (0 == strcmp(name, "CharPrevExA")) return (void *)CharPrevExA;
	else if (0 == strcmp(name, "CharPrevW")) return (void *)CharPrevW;
	else if (0 == strcmp(name, "CharToOemA")) return (void *)CharToOemA;
	else if (0 == strcmp(name, "CharToOemBuffA")) return (void *)CharToOemBuffA;
	else if (0 == strcmp(name, "CharToOemBuffW")) return (void *)CharToOemBuffW;
	else if (0 == strcmp(name, "CharToOemW")) return (void *)CharToOemW;
	else if (0 == strcmp(name, "CharUpperA")) return (void *)CharUpperA;
	else if (0 == strcmp(name, "CharUpperBuffA")) return (void *)CharUpperBuffA;
	else if (0 == strcmp(name, "CharUpperBuffW")) return (void *)CharUpperBuffW;
	else if (0 == strcmp(name, "CharUpperW")) return (void *)CharUpperW;
	else if (0 == strcmp(name, "CheckDlgButton")) return (void *)CheckDlgButton;
	else if (0 == strcmp(name, "CheckMenuItem")) return (void *)CheckMenuItem;
	else if (0 == strcmp(name, "CheckMenuRadioItem")) return (void *)CheckMenuRadioItem;
	else if (0 == strcmp(name, "CheckRadioButton")) return (void *)CheckRadioButton;
	else if (0 == strcmp(name, "ChildWindowFromPoint")) return (void *)ChildWindowFromPoint;
	else if (0 == strcmp(name, "ChildWindowFromPointEx")) return (void *)ChildWindowFromPointEx;
	else if (0 == strcmp(name, "ClientToScreen")) return (void *)ClientToScreen;
	else if (0 == strcmp(name, "ClipCursor")) return (void *)ClipCursor;
	else if (0 == strcmp(name, "CloseClipboard")) return (void *)CloseClipboard;
	else if (0 == strcmp(name, "CloseDesktop")) return (void *)CloseDesktop;
	else if (0 == strcmp(name, "CloseWindow")) return (void *)CloseWindow;
	else if (0 == strcmp(name, "CloseWindowStation")) return (void *)CloseWindowStation;
	else if (0 == strcmp(name, "CopyAcceleratorTableA")) return (void *)CopyAcceleratorTableA;
	else if (0 == strcmp(name, "CopyAcceleratorTableW")) return (void *)CopyAcceleratorTableW;
	else if (0 == strcmp(name, "CopyIcon")) return (void *)CopyIcon;
	else if (0 == strcmp(name, "CopyImage")) return (void *)CopyImage;
	else if (0 == strcmp(name, "CopyRect")) return (void *)CopyRect;
	else if (0 == strcmp(name, "CountClipboardFormats")) return (void *)CountClipboardFormats;
	else if (0 == strcmp(name, "CreateAcceleratorTableA")) return (void *)CreateAcceleratorTableA;
	else if (0 == strcmp(name, "CreateAcceleratorTableW")) return (void *)CreateAcceleratorTableW;
	else if (0 == strcmp(name, "CreateCaret")) return (void *)CreateCaret;
	else if (0 == strcmp(name, "CreateCursor")) return (void *)CreateCursor;
	else if (0 == strcmp(name, "CreateDesktopA")) return (void *)CreateDesktopA;
	else if (0 == strcmp(name, "CreateDesktopW")) return (void *)CreateDesktopW;
	else if (0 == strcmp(name, "CreateDialogIndirectParamA")) return (void *)CreateDialogIndirectParamA;
	else if (0 == strcmp(name, "CreateDialogIndirectParamW")) return (void *)CreateDialogIndirectParamW;
	else if (0 == strcmp(name, "CreateDialogParamA")) return (void *)CreateDialogParamA;
	else if (0 == strcmp(name, "CreateDialogParamW")) return (void *)CreateDialogParamW;
	else if (0 == strcmp(name, "CreateIcon")) return (void *)CreateIcon;
	else if (0 == strcmp(name, "CreateIconFromResource")) return (void *)CreateIconFromResource;
	else if (0 == strcmp(name, "CreateIconFromResourceEx")) return (void *)CreateIconFromResourceEx;
	else if (0 == strcmp(name, "CreateIconIndirect")) return (void *)CreateIconIndirect;
	else if (0 == strcmp(name, "CreateMDIWindowA")) return (void *)CreateMDIWindowA;
	else if (0 == strcmp(name, "CreateMDIWindowW")) return (void *)CreateMDIWindowW;
	else if (0 == strcmp(name, "CreateMenu")) return (void *)CreateMenu;
	else if (0 == strcmp(name, "CreatePopupMenu")) return (void *)CreatePopupMenu;
	else if (0 == strcmp(name, "CreateWindowExA")) return (void *)CreateWindowExA;
	else if (0 == strcmp(name, "CreateWindowExW")) return (void *)CreateWindowExW;
	else if (0 == strcmp(name, "CreateWindowStationA")) return (void *)CreateWindowStationA;
	else if (0 == strcmp(name, "CreateWindowStationW")) return (void *)CreateWindowStationW;
	else if (0 == strcmp(name, "DdeAbandonTransaction")) return (void *)DdeAbandonTransaction;
	else if (0 == strcmp(name, "DdeAccessData")) return (void *)DdeAccessData;
	else if (0 == strcmp(name, "DdeAddData")) return (void *)DdeAddData;
	else if (0 == strcmp(name, "DdeClientTransaction")) return (void *)DdeClientTransaction;
	else if (0 == strcmp(name, "DdeCmpStringHandles")) return (void *)DdeCmpStringHandles;
	else if (0 == strcmp(name, "DdeConnect")) return (void *)DdeConnect;
	else if (0 == strcmp(name, "DdeConnectList")) return (void *)DdeConnectList;
	else if (0 == strcmp(name, "DdeCreateDataHandle")) return (void *)DdeCreateDataHandle;
	else if (0 == strcmp(name, "DdeCreateStringHandleA")) return (void *)DdeCreateStringHandleA;
	else if (0 == strcmp(name, "DdeCreateStringHandleW")) return (void *)DdeCreateStringHandleW;
	else if (0 == strcmp(name, "DdeDisconnect")) return (void *)DdeDisconnect;
	else if (0 == strcmp(name, "DdeDisconnectList")) return (void *)DdeDisconnectList;
	else if (0 == strcmp(name, "DdeEnableCallback")) return (void *)DdeEnableCallback;
	else if (0 == strcmp(name, "DdeFreeDataHandle")) return (void *)DdeFreeDataHandle;
	else if (0 == strcmp(name, "DdeFreeStringHandle")) return (void *)DdeFreeStringHandle;
	else if (0 == strcmp(name, "DdeGetData")) return (void *)DdeGetData;
	else if (0 == strcmp(name, "DdeGetLastError")) return (void *)DdeGetLastError;
	else if (0 == strcmp(name, "DdeImpersonateClient")) return (void *)DdeImpersonateClient;
	else if (0 == strcmp(name, "DdeInitializeA")) return (void *)DdeInitializeA;
	else if (0 == strcmp(name, "DdeInitializeW")) return (void *)DdeInitializeW;
	else if (0 == strcmp(name, "DdeKeepStringHandle")) return (void *)DdeKeepStringHandle;
	else if (0 == strcmp(name, "DdeNameService")) return (void *)DdeNameService;
	else if (0 == strcmp(name, "DdePostAdvise")) return (void *)DdePostAdvise;
	else if (0 == strcmp(name, "DdeQueryConvInfo")) return (void *)DdeQueryConvInfo;
	else if (0 == strcmp(name, "DdeQueryNextServer")) return (void *)DdeQueryNextServer;
	else if (0 == strcmp(name, "DdeQueryStringA")) return (void *)DdeQueryStringA;
	else if (0 == strcmp(name, "DdeQueryStringW")) return (void *)DdeQueryStringW;
	else if (0 == strcmp(name, "DdeReconnect")) return (void *)DdeReconnect;
	else if (0 == strcmp(name, "DdeSetQualityOfService")) return (void *)DdeSetQualityOfService;
	else if (0 == strcmp(name, "DdeSetUserHandle")) return (void *)DdeSetUserHandle;
	else if (0 == strcmp(name, "DdeUnaccessData")) return (void *)DdeUnaccessData;
	else if (0 == strcmp(name, "DdeUninitialize")) return (void *)DdeUninitialize;
	else if (0 == strcmp(name, "DefDlgProcA")) return (void *)DefDlgProcA;
	else if (0 == strcmp(name, "DefDlgProcW")) return (void *)DefDlgProcW;
	else if (0 == strcmp(name, "DefFrameProcA")) return (void *)DefFrameProcA;
	else if (0 == strcmp(name, "DefFrameProcW")) return (void *)DefFrameProcW;
	else if (0 == strcmp(name, "DefMDIChildProcA")) return (void *)DefMDIChildProcA;
	else if (0 == strcmp(name, "DefMDIChildProcW")) return (void *)DefMDIChildProcW;
	else if (0 == strcmp(name, "DefWindowProcA")) return (void *)DefWindowProcA;
	else if (0 == strcmp(name, "DefWindowProcW")) return (void *)DefWindowProcW;
	else if (0 == strcmp(name, "DeferWindowPos")) return (void *)DeferWindowPos;
	else if (0 == strcmp(name, "DeleteMenu")) return (void *)DeleteMenu;
	else if (0 == strcmp(name, "DestroyAcceleratorTable")) return (void *)DestroyAcceleratorTable;
	else if (0 == strcmp(name, "DestroyCaret")) return (void *)DestroyCaret;
	else if (0 == strcmp(name, "DestroyCursor")) return (void *)DestroyCursor;
	else if (0 == strcmp(name, "DestroyIcon")) return (void *)DestroyIcon;
	else if (0 == strcmp(name, "DestroyMenu")) return (void *)DestroyMenu;
	else if (0 == strcmp(name, "DestroyWindow")) return (void *)DestroyWindow;
	else if (0 == strcmp(name, "DialogBoxIndirectParamA")) return (void *)DialogBoxIndirectParamA;
	else if (0 == strcmp(name, "DialogBoxIndirectParamW")) return (void *)DialogBoxIndirectParamW;
	else if (0 == strcmp(name, "DialogBoxParamA")) return (void *)DialogBoxParamA;
	else if (0 == strcmp(name, "DialogBoxParamW")) return (void *)DialogBoxParamW;
	else if (0 == strcmp(name, "DispatchMessageA")) return (void *)DispatchMessageA;
	else if (0 == strcmp(name, "DispatchMessageW")) return (void *)DispatchMessageW;
	else if (0 == strcmp(name, "DlgDirListA")) return (void *)DlgDirListA;
	else if (0 == strcmp(name, "DlgDirListComboBoxA")) return (void *)DlgDirListComboBoxA;
	else if (0 == strcmp(name, "DlgDirListComboBoxW")) return (void *)DlgDirListComboBoxW;
	else if (0 == strcmp(name, "DlgDirListW")) return (void *)DlgDirListW;
	else if (0 == strcmp(name, "DlgDirSelectComboBoxExA")) return (void *)DlgDirSelectComboBoxExA;
	else if (0 == strcmp(name, "DlgDirSelectComboBoxExW")) return (void *)DlgDirSelectComboBoxExW;
	else if (0 == strcmp(name, "DlgDirSelectExA")) return (void *)DlgDirSelectExA;
	else if (0 == strcmp(name, "DlgDirSelectExW")) return (void *)DlgDirSelectExW;
	else if (0 == strcmp(name, "DragDetect")) return (void *)DragDetect;
	else if (0 == strcmp(name, "DragObject")) return (void *)DragObject;
	else if (0 == strcmp(name, "DrawAnimatedRects")) return (void *)DrawAnimatedRects;
	else if (0 == strcmp(name, "DrawCaption")) return (void *)DrawCaption;
	else if (0 == strcmp(name, "DrawEdge")) return (void *)DrawEdge;
	else if (0 == strcmp(name, "DrawFocusRect")) return (void *)DrawFocusRect;
	else if (0 == strcmp(name, "DrawFrameControl")) return (void *)DrawFrameControl;
	else if (0 == strcmp(name, "DrawIcon")) return (void *)DrawIcon;
	else if (0 == strcmp(name, "DrawIconEx")) return (void *)DrawIconEx;
	else if (0 == strcmp(name, "DrawMenuBar")) return (void *)DrawMenuBar;
	else if (0 == strcmp(name, "DrawStateA")) return (void *)DrawStateA;
	else if (0 == strcmp(name, "DrawStateW")) return (void *)DrawStateW;
	else if (0 == strcmp(name, "DrawTextA")) return (void *)DrawTextA;
	else if (0 == strcmp(name, "DrawTextExA")) return (void *)DrawTextExA;
	else if (0 == strcmp(name, "DrawTextExW")) return (void *)DrawTextExW;
	else if (0 == strcmp(name, "DrawTextW")) return (void *)DrawTextW;
	else if (0 == strcmp(name, "EmptyClipboard")) return (void *)EmptyClipboard;
	else if (0 == strcmp(name, "EnableMenuItem")) return (void *)EnableMenuItem;
	else if (0 == strcmp(name, "EnableScrollBar")) return (void *)EnableScrollBar;
	else if (0 == strcmp(name, "EnableWindow")) return (void *)EnableWindow;
	else if (0 == strcmp(name, "EndDeferWindowPos")) return (void *)EndDeferWindowPos;
	else if (0 == strcmp(name, "EndDialog")) return (void *)EndDialog;
	else if (0 == strcmp(name, "EndPaint")) return (void *)EndPaint;
	else if (0 == strcmp(name, "EnumChildWindows")) return (void *)EnumChildWindows;
	else if (0 == strcmp(name, "EnumClipboardFormats")) return (void *)EnumClipboardFormats;
	else if (0 == strcmp(name, "EnumDesktopWindows")) return (void *)EnumDesktopWindows;
	else if (0 == strcmp(name, "EnumDesktopsA")) return (void *)EnumDesktopsA;
	else if (0 == strcmp(name, "EnumDesktopsW")) return (void *)EnumDesktopsW;
	else if (0 == strcmp(name, "EnumDisplaySettingsA")) return (void *)EnumDisplaySettingsA;
	else if (0 == strcmp(name, "EnumDisplaySettingsW")) return (void *)EnumDisplaySettingsW;
	else if (0 == strcmp(name, "EnumPropsA")) return (void *)EnumPropsA;
	else if (0 == strcmp(name, "EnumPropsExA")) return (void *)EnumPropsExA;
	else if (0 == strcmp(name, "EnumPropsExW")) return (void *)EnumPropsExW;
	else if (0 == strcmp(name, "EnumPropsW")) return (void *)EnumPropsW;
	else if (0 == strcmp(name, "EnumThreadWindows")) return (void *)EnumThreadWindows;
	else if (0 == strcmp(name, "EnumWindowStationsA")) return (void *)EnumWindowStationsA;
	else if (0 == strcmp(name, "EnumWindowStationsW")) return (void *)EnumWindowStationsW;
	else if (0 == strcmp(name, "EnumWindows")) return (void *)EnumWindows;
	else if (0 == strcmp(name, "EqualRect")) return (void *)EqualRect;
	else if (0 == strcmp(name, "ExcludeUpdateRgn")) return (void *)ExcludeUpdateRgn;
	else if (0 == strcmp(name, "ExitWindowsEx")) return (void *)ExitWindowsEx;
	else if (0 == strcmp(name, "FillRect")) return (void *)FillRect;
	else if (0 == strcmp(name, "FindWindowA")) return (void *)FindWindowA;
	else if (0 == strcmp(name, "FindWindowExA")) return (void *)FindWindowExA;
	else if (0 == strcmp(name, "FindWindowExW")) return (void *)FindWindowExW;
	else if (0 == strcmp(name, "FindWindowW")) return (void *)FindWindowW;
	else if (0 == strcmp(name, "FlashWindow")) return (void *)FlashWindow;
	else if (0 == strcmp(name, "FrameRect")) return (void *)FrameRect;
	else if (0 == strcmp(name, "FreeDDElParam")) return (void *)FreeDDElParam;
	else if (0 == strcmp(name, "GetActiveWindow")) return (void *)GetActiveWindow;
	else if (0 == strcmp(name, "GetAsyncKeyState")) return (void *)GetAsyncKeyState;
	else if (0 == strcmp(name, "GetCapture")) return (void *)GetCapture;
	else if (0 == strcmp(name, "GetCaretBlinkTime")) return (void *)GetCaretBlinkTime;
	else if (0 == strcmp(name, "GetCaretPos")) return (void *)GetCaretPos;
	else if (0 == strcmp(name, "GetClassInfoA")) return (void *)GetClassInfoA;
	else if (0 == strcmp(name, "GetClassInfoExA")) return (void *)GetClassInfoExA;
	else if (0 == strcmp(name, "GetClassInfoExW")) return (void *)GetClassInfoExW;
	else if (0 == strcmp(name, "GetClassInfoW")) return (void *)GetClassInfoW;
	else if (0 == strcmp(name, "GetClassLongA")) return (void *)GetClassLongA;
	else if (0 == strcmp(name, "GetClassLongW")) return (void *)GetClassLongW;
	else if (0 == strcmp(name, "GetClassNameA")) return (void *)GetClassNameA;
	else if (0 == strcmp(name, "GetClassNameW")) return (void *)GetClassNameW;
	else if (0 == strcmp(name, "GetClassWord")) return (void *)GetClassWord;
	else if (0 == strcmp(name, "GetClientRect")) return (void *)GetClientRect;
	else if (0 == strcmp(name, "GetClipCursor")) return (void *)GetClipCursor;
	else if (0 == strcmp(name, "GetClipboardData")) return (void *)GetClipboardData;
	else if (0 == strcmp(name, "GetClipboardFormatNameA")) return (void *)GetClipboardFormatNameA;
	else if (0 == strcmp(name, "GetClipboardFormatNameW")) return (void *)GetClipboardFormatNameW;
	else if (0 == strcmp(name, "GetClipboardOwner")) return (void *)GetClipboardOwner;
	else if (0 == strcmp(name, "GetClipboardViewer")) return (void *)GetClipboardViewer;
	else if (0 == strcmp(name, "GetCursor")) return (void *)GetCursor;
	else if (0 == strcmp(name, "GetCursorPos")) return (void *)GetCursorPos;
	else if (0 == strcmp(name, "GetDC")) return (void *)GetDC;
	else if (0 == strcmp(name, "GetDCEx")) return (void *)GetDCEx;
	else if (0 == strcmp(name, "GetDesktopWindow")) return (void *)GetDesktopWindow;
	else if (0 == strcmp(name, "GetDialogBaseUnits")) return (void *)GetDialogBaseUnits;
	else if (0 == strcmp(name, "GetDlgCtrlID")) return (void *)GetDlgCtrlID;
	else if (0 == strcmp(name, "GetDlgItem")) return (void *)GetDlgItem;
	else if (0 == strcmp(name, "GetDlgItemInt")) return (void *)GetDlgItemInt;
	else if (0 == strcmp(name, "GetDlgItemTextA")) return (void *)GetDlgItemTextA;
	else if (0 == strcmp(name, "GetDlgItemTextW")) return (void *)GetDlgItemTextW;
	else if (0 == strcmp(name, "GetDoubleClickTime")) return (void *)GetDoubleClickTime;
	else if (0 == strcmp(name, "GetFocus")) return (void *)GetFocus;
	else if (0 == strcmp(name, "GetForegroundWindow")) return (void *)GetForegroundWindow;
	else if (0 == strcmp(name, "GetIconInfo")) return (void *)GetIconInfo;
	else if (0 == strcmp(name, "GetInputState")) return (void *)GetInputState;
	else if (0 == strcmp(name, "GetKBCodePage")) return (void *)GetKBCodePage;
	else if (0 == strcmp(name, "GetKeyNameTextA")) return (void *)GetKeyNameTextA;
	else if (0 == strcmp(name, "GetKeyNameTextW")) return (void *)GetKeyNameTextW;
	else if (0 == strcmp(name, "GetKeyState")) return (void *)GetKeyState;
	else if (0 == strcmp(name, "GetKeyboardLayout")) return (void *)GetKeyboardLayout;
	else if (0 == strcmp(name, "GetKeyboardLayoutList")) return (void *)GetKeyboardLayoutList;
	else if (0 == strcmp(name, "GetKeyboardLayoutNameA")) return (void *)GetKeyboardLayoutNameA;
	else if (0 == strcmp(name, "GetKeyboardLayoutNameW")) return (void *)GetKeyboardLayoutNameW;
	else if (0 == strcmp(name, "GetKeyboardState")) return (void *)GetKeyboardState;
	else if (0 == strcmp(name, "GetKeyboardType")) return (void *)GetKeyboardType;
	else if (0 == strcmp(name, "GetLastActivePopup")) return (void *)GetLastActivePopup;
	else if (0 == strcmp(name, "GetMenu")) return (void *)GetMenu;
	else if (0 == strcmp(name, "GetMenuCheckMarkDimensions")) return (void *)GetMenuCheckMarkDimensions;
	else if (0 == strcmp(name, "GetMenuContextHelpId")) return (void *)GetMenuContextHelpId;
	else if (0 == strcmp(name, "GetMenuDefaultItem")) return (void *)GetMenuDefaultItem;
	else if (0 == strcmp(name, "GetMenuItemCount")) return (void *)GetMenuItemCount;
	else if (0 == strcmp(name, "GetMenuItemID")) return (void *)GetMenuItemID;
	else if (0 == strcmp(name, "GetMenuItemInfoA")) return (void *)GetMenuItemInfoA;
	else if (0 == strcmp(name, "GetMenuItemInfoW")) return (void *)GetMenuItemInfoW;
	else if (0 == strcmp(name, "GetMenuItemRect")) return (void *)GetMenuItemRect;
	else if (0 == strcmp(name, "GetMenuState")) return (void *)GetMenuState;
	else if (0 == strcmp(name, "GetMenuStringA")) return (void *)GetMenuStringA;
	else if (0 == strcmp(name, "GetMenuStringW")) return (void *)GetMenuStringW;
	else if (0 == strcmp(name, "GetMessageA")) return (void *)GetMessageA;
	else if (0 == strcmp(name, "GetMessageExtraInfo")) return (void *)GetMessageExtraInfo;
	else if (0 == strcmp(name, "GetMessagePos")) return (void *)GetMessagePos;
	else if (0 == strcmp(name, "GetMessageTime")) return (void *)GetMessageTime;
	else if (0 == strcmp(name, "GetMessageW")) return (void *)GetMessageW;
	else if (0 == strcmp(name, "GetNextDlgGroupItem")) return (void *)GetNextDlgGroupItem;
	else if (0 == strcmp(name, "GetNextDlgTabItem")) return (void *)GetNextDlgTabItem;
	else if (0 == strcmp(name, "GetOpenClipboardWindow")) return (void *)GetOpenClipboardWindow;
	else if (0 == strcmp(name, "GetParent")) return (void *)GetParent;
	else if (0 == strcmp(name, "GetPriorityClipboardFormat")) return (void *)GetPriorityClipboardFormat;
	else if (0 == strcmp(name, "GetProcessWindowStation")) return (void *)GetProcessWindowStation;
	else if (0 == strcmp(name, "GetPropA")) return (void *)GetPropA;
	else if (0 == strcmp(name, "GetPropW")) return (void *)GetPropW;
	else if (0 == strcmp(name, "GetQueueStatus")) return (void *)GetQueueStatus;
	else if (0 == strcmp(name, "GetScrollInfo")) return (void *)GetScrollInfo;
	else if (0 == strcmp(name, "GetScrollPos")) return (void *)GetScrollPos;
	else if (0 == strcmp(name, "GetScrollRange")) return (void *)GetScrollRange;
	else if (0 == strcmp(name, "GetSubMenu")) return (void *)GetSubMenu;
	else if (0 == strcmp(name, "GetSysColor")) return (void *)GetSysColor;
	else if (0 == strcmp(name, "GetSysColorBrush")) return (void *)GetSysColorBrush;
	else if (0 == strcmp(name, "GetSystemMenu")) return (void *)GetSystemMenu;
	else if (0 == strcmp(name, "GetSystemMetrics")) return (void *)GetSystemMetrics;
	else if (0 == strcmp(name, "GetTabbedTextExtentA")) return (void *)GetTabbedTextExtentA;
	else if (0 == strcmp(name, "GetTabbedTextExtentW")) return (void *)GetTabbedTextExtentW;
	else if (0 == strcmp(name, "GetThreadDesktop")) return (void *)GetThreadDesktop;
	else if (0 == strcmp(name, "GetTopWindow")) return (void *)GetTopWindow;
	else if (0 == strcmp(name, "GetUpdateRect")) return (void *)GetUpdateRect;
	else if (0 == strcmp(name, "GetUpdateRgn")) return (void *)GetUpdateRgn;
	else if (0 == strcmp(name, "GetUserObjectInformationA")) return (void *)GetUserObjectInformationA;
	else if (0 == strcmp(name, "GetUserObjectInformationW")) return (void *)GetUserObjectInformationW;
	else if (0 == strcmp(name, "GetUserObjectSecurity")) return (void *)GetUserObjectSecurity;
	else if (0 == strcmp(name, "GetWindow")) return (void *)GetWindow;
	else if (0 == strcmp(name, "GetWindowContextHelpId")) return (void *)GetWindowContextHelpId;
	else if (0 == strcmp(name, "GetWindowDC")) return (void *)GetWindowDC;
	else if (0 == strcmp(name, "GetWindowLongA")) return (void *)GetWindowLongA;
	else if (0 == strcmp(name, "GetWindowLongW")) return (void *)GetWindowLongW;
	else if (0 == strcmp(name, "GetWindowPlacement")) return (void *)GetWindowPlacement;
	else if (0 == strcmp(name, "GetWindowRect")) return (void *)GetWindowRect;
	else if (0 == strcmp(name, "GetWindowRgn")) return (void *)GetWindowRgn;
	else if (0 == strcmp(name, "GetWindowTextA")) return (void *)GetWindowTextA;
	else if (0 == strcmp(name, "GetWindowTextLengthA")) return (void *)GetWindowTextLengthA;
	else if (0 == strcmp(name, "GetWindowTextLengthW")) return (void *)GetWindowTextLengthW;
	else if (0 == strcmp(name, "GetWindowTextW")) return (void *)GetWindowTextW;
	else if (0 == strcmp(name, "GetWindowThreadProcessId")) return (void *)GetWindowThreadProcessId;
	else if (0 == strcmp(name, "GetWindowWord")) return (void *)GetWindowWord;
	else if (0 == strcmp(name, "GrayStringA")) return (void *)GrayStringA;
	else if (0 == strcmp(name, "GrayStringW")) return (void *)GrayStringW;
	else if (0 == strcmp(name, "HideCaret")) return (void *)HideCaret;
	else if (0 == strcmp(name, "HiliteMenuItem")) return (void *)HiliteMenuItem;
	else if (0 == strcmp(name, "ImpersonateDdeClientWindow")) return (void *)ImpersonateDdeClientWindow;
	else if (0 == strcmp(name, "InSendMessage")) return (void *)InSendMessage;
	else if (0 == strcmp(name, "InflateRect")) return (void *)InflateRect;
	else if (0 == strcmp(name, "InsertMenuA")) return (void *)InsertMenuA;
	else if (0 == strcmp(name, "InsertMenuItemA")) return (void *)InsertMenuItemA;
	else if (0 == strcmp(name, "InsertMenuItemW")) return (void *)InsertMenuItemW;
	else if (0 == strcmp(name, "InsertMenuW")) return (void *)InsertMenuW;
	else if (0 == strcmp(name, "IntersectRect")) return (void *)IntersectRect;
	else if (0 == strcmp(name, "InvalidateRect")) return (void *)InvalidateRect;
	else if (0 == strcmp(name, "InvalidateRgn")) return (void *)InvalidateRgn;
	else if (0 == strcmp(name, "InvertRect")) return (void *)InvertRect;
	else if (0 == strcmp(name, "IsCharAlphaA")) return (void *)IsCharAlphaA;
	else if (0 == strcmp(name, "IsCharAlphaNumericA")) return (void *)IsCharAlphaNumericA;
	else if (0 == strcmp(name, "IsCharAlphaNumericW")) return (void *)IsCharAlphaNumericW;
	else if (0 == strcmp(name, "IsCharAlphaW")) return (void *)IsCharAlphaW;
	else if (0 == strcmp(name, "IsCharLowerA")) return (void *)IsCharLowerA;
	else if (0 == strcmp(name, "IsCharLowerW")) return (void *)IsCharLowerW;
	else if (0 == strcmp(name, "IsCharUpperA")) return (void *)IsCharUpperA;
	else if (0 == strcmp(name, "IsCharUpperW")) return (void *)IsCharUpperW;
	else if (0 == strcmp(name, "IsChild")) return (void *)IsChild;
	else if (0 == strcmp(name, "IsClipboardFormatAvailable")) return (void *)IsClipboardFormatAvailable;
	else if (0 == strcmp(name, "IsDialogMessageA")) return (void *)IsDialogMessageA;
	else if (0 == strcmp(name, "IsDialogMessageW")) return (void *)IsDialogMessageW;
	else if (0 == strcmp(name, "IsDlgButtonChecked")) return (void *)IsDlgButtonChecked;
	else if (0 == strcmp(name, "IsIconic")) return (void *)IsIconic;
	else if (0 == strcmp(name, "IsMenu")) return (void *)IsMenu;
	else if (0 == strcmp(name, "IsRectEmpty")) return (void *)IsRectEmpty;
	else if (0 == strcmp(name, "IsWindow")) return (void *)IsWindow;
	else if (0 == strcmp(name, "IsWindowEnabled")) return (void *)IsWindowEnabled;
	else if (0 == strcmp(name, "IsWindowUnicode")) return (void *)IsWindowUnicode;
	else if (0 == strcmp(name, "IsWindowVisible")) return (void *)IsWindowVisible;
	else if (0 == strcmp(name, "IsZoomed")) return (void *)IsZoomed;
	else if (0 == strcmp(name, "KillTimer")) return (void *)KillTimer;
	else if (0 == strcmp(name, "LoadAcceleratorsA")) return (void *)LoadAcceleratorsA;
	else if (0 == strcmp(name, "LoadAcceleratorsW")) return (void *)LoadAcceleratorsW;
	else if (0 == strcmp(name, "LoadBitmapA")) return (void *)LoadBitmapA;
	else if (0 == strcmp(name, "LoadBitmapW")) return (void *)LoadBitmapW;
	else if (0 == strcmp(name, "LoadCursorA")) return (void *)LoadCursorA;
	else if (0 == strcmp(name, "LoadCursorFromFileA")) return (void *)LoadCursorFromFileA;
	else if (0 == strcmp(name, "LoadCursorFromFileW")) return (void *)LoadCursorFromFileW;
	else if (0 == strcmp(name, "LoadCursorW")) return (void *)LoadCursorW;
	else if (0 == strcmp(name, "LoadIconA")) return (void *)LoadIconA;
	else if (0 == strcmp(name, "LoadIconW")) return (void *)LoadIconW;
	else if (0 == strcmp(name, "LoadImageA")) return (void *)LoadImageA;
	else if (0 == strcmp(name, "LoadImageW")) return (void *)LoadImageW;
	else if (0 == strcmp(name, "LoadKeyboardLayoutA")) return (void *)LoadKeyboardLayoutA;
	else if (0 == strcmp(name, "LoadKeyboardLayoutW")) return (void *)LoadKeyboardLayoutW;
	else if (0 == strcmp(name, "LoadMenuA")) return (void *)LoadMenuA;
	else if (0 == strcmp(name, "LoadMenuIndirectA")) return (void *)LoadMenuIndirectA;
	else if (0 == strcmp(name, "LoadMenuIndirectW")) return (void *)LoadMenuIndirectW;
	else if (0 == strcmp(name, "LoadMenuW")) return (void *)LoadMenuW;
	else if (0 == strcmp(name, "LoadStringA")) return (void *)LoadStringA;
	else if (0 == strcmp(name, "LoadStringW")) return (void *)LoadStringW;
	else if (0 == strcmp(name, "LockWindowUpdate")) return (void *)LockWindowUpdate;
	else if (0 == strcmp(name, "LookupIconIdFromDirectory")) return (void *)LookupIconIdFromDirectory;
	else if (0 == strcmp(name, "LookupIconIdFromDirectoryEx")) return (void *)LookupIconIdFromDirectoryEx;
	else if (0 == strcmp(name, "MapDialogRect")) return (void *)MapDialogRect;
	else if (0 == strcmp(name, "MapVirtualKeyA")) return (void *)MapVirtualKeyA;
	else if (0 == strcmp(name, "MapVirtualKeyExA")) return (void *)MapVirtualKeyExA;
	else if (0 == strcmp(name, "MapVirtualKeyExW")) return (void *)MapVirtualKeyExW;
	else if (0 == strcmp(name, "MapVirtualKeyW")) return (void *)MapVirtualKeyW;
	else if (0 == strcmp(name, "MapWindowPoints")) return (void *)MapWindowPoints;
	else if (0 == strcmp(name, "MenuItemFromPoint")) return (void *)MenuItemFromPoint;
	else if (0 == strcmp(name, "MessageBeep")) return (void *)MessageBeep;
	else if (0 == strcmp(name, "MessageBoxA")) return (void *)MessageBoxA;
	else if (0 == strcmp(name, "MessageBoxExA")) return (void *)MessageBoxExA;
	else if (0 == strcmp(name, "MessageBoxExW")) return (void *)MessageBoxExW;
	else if (0 == strcmp(name, "MessageBoxIndirectA")) return (void *)MessageBoxIndirectA;
	else if (0 == strcmp(name, "MessageBoxIndirectW")) return (void *)MessageBoxIndirectW;
	else if (0 == strcmp(name, "MessageBoxW")) return (void *)MessageBoxW;
	else if (0 == strcmp(name, "ModifyMenuA")) return (void *)ModifyMenuA;
	else if (0 == strcmp(name, "ModifyMenuW")) return (void *)ModifyMenuW;
	else if (0 == strcmp(name, "MoveWindow")) return (void *)MoveWindow;
	else if (0 == strcmp(name, "MsgWaitForMultipleObjects")) return (void *)MsgWaitForMultipleObjects;
	else if (0 == strcmp(name, "MsgWaitForMultipleObjectsEx")) return (void *)MsgWaitForMultipleObjectsEx;
	else if (0 == strcmp(name, "OemKeyScan")) return (void *)OemKeyScan;
	else if (0 == strcmp(name, "OemToCharA")) return (void *)OemToCharA;
	else if (0 == strcmp(name, "OemToCharBuffA")) return (void *)OemToCharBuffA;
	else if (0 == strcmp(name, "OemToCharBuffW")) return (void *)OemToCharBuffW;
	else if (0 == strcmp(name, "OemToCharW")) return (void *)OemToCharW;
	else if (0 == strcmp(name, "OffsetRect")) return (void *)OffsetRect;
	else if (0 == strcmp(name, "OpenClipboard")) return (void *)OpenClipboard;
	else if (0 == strcmp(name, "OpenDesktopA")) return (void *)OpenDesktopA;
	else if (0 == strcmp(name, "OpenDesktopW")) return (void *)OpenDesktopW;
	else if (0 == strcmp(name, "OpenIcon")) return (void *)OpenIcon;
	else if (0 == strcmp(name, "OpenInputDesktop")) return (void *)OpenInputDesktop;
	else if (0 == strcmp(name, "OpenWindowStationA")) return (void *)OpenWindowStationA;
	else if (0 == strcmp(name, "OpenWindowStationW")) return (void *)OpenWindowStationW;
	else if (0 == strcmp(name, "PackDDElParam")) return (void *)PackDDElParam;
	else if (0 == strcmp(name, "PaintDesktop")) return (void *)PaintDesktop;
	else if (0 == strcmp(name, "PeekMessageA")) return (void *)PeekMessageA;
	else if (0 == strcmp(name, "PeekMessageW")) return (void *)PeekMessageW;
	else if (0 == strcmp(name, "PostMessageA")) return (void *)PostMessageA;
	else if (0 == strcmp(name, "PostMessageW")) return (void *)PostMessageW;
	else if (0 == strcmp(name, "PostQuitMessage")) return (void *)PostQuitMessage;
	else if (0 == strcmp(name, "PostThreadMessageA")) return (void *)PostThreadMessageA;
	else if (0 == strcmp(name, "PostThreadMessageW")) return (void *)PostThreadMessageW;
	else if (0 == strcmp(name, "PtInRect")) return (void *)PtInRect;
	else if (0 == strcmp(name, "RedrawWindow")) return (void *)RedrawWindow;
	else if (0 == strcmp(name, "RegisterClassA")) return (void *)RegisterClassA;
	else if (0 == strcmp(name, "RegisterClassExA")) return (void *)RegisterClassExA;
	else if (0 == strcmp(name, "RegisterClassExW")) return (void *)RegisterClassExW;
	else if (0 == strcmp(name, "RegisterClassW")) return (void *)RegisterClassW;
	else if (0 == strcmp(name, "RegisterClipboardFormatA")) return (void *)RegisterClipboardFormatA;
	else if (0 == strcmp(name, "RegisterClipboardFormatW")) return (void *)RegisterClipboardFormatW;
	else if (0 == strcmp(name, "RegisterHotKey")) return (void *)RegisterHotKey;
	else if (0 == strcmp(name, "RegisterWindowMessageA")) return (void *)RegisterWindowMessageA;
	else if (0 == strcmp(name, "RegisterWindowMessageW")) return (void *)RegisterWindowMessageW;
	else if (0 == strcmp(name, "ReleaseCapture")) return (void *)ReleaseCapture;
	else if (0 == strcmp(name, "ReleaseDC")) return (void *)ReleaseDC;
	else if (0 == strcmp(name, "RemoveMenu")) return (void *)RemoveMenu;
	else if (0 == strcmp(name, "RemovePropA")) return (void *)RemovePropA;
	else if (0 == strcmp(name, "RemovePropW")) return (void *)RemovePropW;
	else if (0 == strcmp(name, "ReplyMessage")) return (void *)ReplyMessage;
	else if (0 == strcmp(name, "ReuseDDElParam")) return (void *)ReuseDDElParam;
	else if (0 == strcmp(name, "ScreenToClient")) return (void *)ScreenToClient;
	else if (0 == strcmp(name, "ScrollDC")) return (void *)ScrollDC;
	else if (0 == strcmp(name, "ScrollWindow")) return (void *)ScrollWindow;
	else if (0 == strcmp(name, "ScrollWindowEx")) return (void *)ScrollWindowEx;
	else if (0 == strcmp(name, "SendDlgItemMessageA")) return (void *)SendDlgItemMessageA;
	else if (0 == strcmp(name, "SendDlgItemMessageW")) return (void *)SendDlgItemMessageW;
	else if (0 == strcmp(name, "SendMessageA")) return (void *)SendMessageA;
	else if (0 == strcmp(name, "SendMessageCallbackA")) return (void *)SendMessageCallbackA;
	else if (0 == strcmp(name, "SendMessageCallbackW")) return (void *)SendMessageCallbackW;
	else if (0 == strcmp(name, "SendMessageTimeoutA")) return (void *)SendMessageTimeoutA;
	else if (0 == strcmp(name, "SendMessageTimeoutW")) return (void *)SendMessageTimeoutW;
	else if (0 == strcmp(name, "SendMessageW")) return (void *)SendMessageW;
	else if (0 == strcmp(name, "SendNotifyMessageA")) return (void *)SendNotifyMessageA;
	else if (0 == strcmp(name, "SendNotifyMessageW")) return (void *)SendNotifyMessageW;
	else if (0 == strcmp(name, "SetActiveWindow")) return (void *)SetActiveWindow;
	else if (0 == strcmp(name, "SetCapture")) return (void *)SetCapture;
	else if (0 == strcmp(name, "SetCaretBlinkTime")) return (void *)SetCaretBlinkTime;
	else if (0 == strcmp(name, "SetCaretPos")) return (void *)SetCaretPos;
	else if (0 == strcmp(name, "SetClassLongA")) return (void *)SetClassLongA;
	else if (0 == strcmp(name, "SetClassLongW")) return (void *)SetClassLongW;
	else if (0 == strcmp(name, "SetClassWord")) return (void *)SetClassWord;
	else if (0 == strcmp(name, "SetClipboardData")) return (void *)SetClipboardData;
	else if (0 == strcmp(name, "SetClipboardViewer")) return (void *)SetClipboardViewer;
	else if (0 == strcmp(name, "SetCursor")) return (void *)SetCursor;
	else if (0 == strcmp(name, "SetCursorPos")) return (void *)SetCursorPos;
	else if (0 == strcmp(name, "SetDebugErrorLevel")) return (void *)SetDebugErrorLevel;
	else if (0 == strcmp(name, "SetDlgItemInt")) return (void *)SetDlgItemInt;
	else if (0 == strcmp(name, "SetDlgItemTextA")) return (void *)SetDlgItemTextA;
	else if (0 == strcmp(name, "SetDlgItemTextW")) return (void *)SetDlgItemTextW;
	else if (0 == strcmp(name, "SetDoubleClickTime")) return (void *)SetDoubleClickTime;
	else if (0 == strcmp(name, "SetFocus")) return (void *)SetFocus;
	else if (0 == strcmp(name, "SetForegroundWindow")) return (void *)SetForegroundWindow;
	else if (0 == strcmp(name, "SetKeyboardState")) return (void *)SetKeyboardState;
	else if (0 == strcmp(name, "SetLastErrorEx")) return (void *)SetLastErrorEx;
	else if (0 == strcmp(name, "SetMenu")) return (void *)SetMenu;
	else if (0 == strcmp(name, "SetMenuContextHelpId")) return (void *)SetMenuContextHelpId;
	else if (0 == strcmp(name, "SetMenuDefaultItem")) return (void *)SetMenuDefaultItem;
	else if (0 == strcmp(name, "SetMenuItemBitmaps")) return (void *)SetMenuItemBitmaps;
	else if (0 == strcmp(name, "SetMenuItemInfoA")) return (void *)SetMenuItemInfoA;
	else if (0 == strcmp(name, "SetMenuItemInfoW")) return (void *)SetMenuItemInfoW;
	else if (0 == strcmp(name, "SetMessageExtraInfo")) return (void *)SetMessageExtraInfo;
	else if (0 == strcmp(name, "SetMessageQueue")) return (void *)SetMessageQueue;
	else if (0 == strcmp(name, "SetParent")) return (void *)SetParent;
	else if (0 == strcmp(name, "SetProcessWindowStation")) return (void *)SetProcessWindowStation;
	else if (0 == strcmp(name, "SetPropA")) return (void *)SetPropA;
	else if (0 == strcmp(name, "SetPropW")) return (void *)SetPropW;
	else if (0 == strcmp(name, "SetRect")) return (void *)SetRect;
	else if (0 == strcmp(name, "SetRectEmpty")) return (void *)SetRectEmpty;
	else if (0 == strcmp(name, "SetScrollInfo")) return (void *)SetScrollInfo;
	else if (0 == strcmp(name, "SetScrollPos")) return (void *)SetScrollPos;
	else if (0 == strcmp(name, "SetScrollRange")) return (void *)SetScrollRange;
	else if (0 == strcmp(name, "SetSysColors")) return (void *)SetSysColors;
	else if (0 == strcmp(name, "SetSystemCursor")) return (void *)SetSystemCursor;
	else if (0 == strcmp(name, "SetThreadDesktop")) return (void *)SetThreadDesktop;
	else if (0 == strcmp(name, "SetTimer")) return (void *)SetTimer;
	else if (0 == strcmp(name, "SetUserObjectInformationA")) return (void *)SetUserObjectInformationA;
	else if (0 == strcmp(name, "SetUserObjectInformationW")) return (void *)SetUserObjectInformationW;
	else if (0 == strcmp(name, "SetUserObjectSecurity")) return (void *)SetUserObjectSecurity;
	else if (0 == strcmp(name, "SetWindowContextHelpId")) return (void *)SetWindowContextHelpId;
	else if (0 == strcmp(name, "SetWindowLongA")) return (void *)SetWindowLongA;
	else if (0 == strcmp(name, "SetWindowLongW")) return (void *)SetWindowLongW;
	else if (0 == strcmp(name, "SetWindowPlacement")) return (void *)SetWindowPlacement;
	else if (0 == strcmp(name, "SetWindowPos")) return (void *)SetWindowPos;
	else if (0 == strcmp(name, "SetWindowRgn")) return (void *)SetWindowRgn;
	else if (0 == strcmp(name, "SetWindowTextA")) return (void *)SetWindowTextA;
	else if (0 == strcmp(name, "SetWindowTextW")) return (void *)SetWindowTextW;
	else if (0 == strcmp(name, "SetWindowWord")) return (void *)SetWindowWord;
	else if (0 == strcmp(name, "SetWindowsHookA")) return (void *)SetWindowsHookA;
	else if (0 == strcmp(name, "SetWindowsHookExA")) return (void *)SetWindowsHookExA;
	else if (0 == strcmp(name, "SetWindowsHookExW")) return (void *)SetWindowsHookExW;
	else if (0 == strcmp(name, "ShowCaret")) return (void *)ShowCaret;
	else if (0 == strcmp(name, "ShowCursor")) return (void *)ShowCursor;
	else if (0 == strcmp(name, "ShowOwnedPopups")) return (void *)ShowOwnedPopups;
	else if (0 == strcmp(name, "ShowScrollBar")) return (void *)ShowScrollBar;
	else if (0 == strcmp(name, "ShowWindow")) return (void *)ShowWindow;
	else if (0 == strcmp(name, "ShowWindowAsync")) return (void *)ShowWindowAsync;
	else if (0 == strcmp(name, "SubtractRect")) return (void *)SubtractRect;
	else if (0 == strcmp(name, "SwapMouseButton")) return (void *)SwapMouseButton;
	else if (0 == strcmp(name, "SwitchDesktop")) return (void *)SwitchDesktop;
	else if (0 == strcmp(name, "SystemParametersInfoA")) return (void *)SystemParametersInfoA;
	else if (0 == strcmp(name, "SystemParametersInfoW")) return (void *)SystemParametersInfoW;
	else if (0 == strcmp(name, "TabbedTextOutA")) return (void *)TabbedTextOutA;
	else if (0 == strcmp(name, "TabbedTextOutW")) return (void *)TabbedTextOutW;
	else if (0 == strcmp(name, "TileWindows")) return (void *)TileWindows;
	else if (0 == strcmp(name, "ToAscii")) return (void *)ToAscii;
	else if (0 == strcmp(name, "ToAsciiEx")) return (void *)ToAsciiEx;
	else if (0 == strcmp(name, "ToUnicode")) return (void *)ToUnicode;
	else if (0 == strcmp(name, "ToUnicodeEx")) return (void *)ToUnicodeEx;
	else if (0 == strcmp(name, "TrackMouseEvent")) return (void *)TrackMouseEvent;
	else if (0 == strcmp(name, "TrackPopupMenu")) return (void *)TrackPopupMenu;
	else if (0 == strcmp(name, "TrackPopupMenuEx")) return (void *)TrackPopupMenuEx;
	else if (0 == strcmp(name, "TranslateAcceleratorA")) return (void *)TranslateAcceleratorA;
	else if (0 == strcmp(name, "TranslateAcceleratorW")) return (void *)TranslateAcceleratorW;
	else if (0 == strcmp(name, "TranslateMDISysAccel")) return (void *)TranslateMDISysAccel;
	else if (0 == strcmp(name, "TranslateMessage")) return (void *)TranslateMessage;
	else if (0 == strcmp(name, "UnhookWindowsHook")) return (void *)UnhookWindowsHook;
	else if (0 == strcmp(name, "UnhookWindowsHookEx")) return (void *)UnhookWindowsHookEx;
	else if (0 == strcmp(name, "UnionRect")) return (void *)UnionRect;
	else if (0 == strcmp(name, "UnloadKeyboardLayout")) return (void *)UnloadKeyboardLayout;
	else if (0 == strcmp(name, "UnpackDDElParam")) return (void *)UnpackDDElParam;
	else if (0 == strcmp(name, "UnregisterClassA")) return (void *)UnregisterClassA;
	else if (0 == strcmp(name, "UnregisterClassW")) return (void *)UnregisterClassW;
	else if (0 == strcmp(name, "UnregisterHotKey")) return (void *)UnregisterHotKey;
	else if (0 == strcmp(name, "UpdateWindow")) return (void *)UpdateWindow;
	else if (0 == strcmp(name, "ValidateRect")) return (void *)ValidateRect;
	else if (0 == strcmp(name, "ValidateRgn")) return (void *)ValidateRgn;
	else if (0 == strcmp(name, "VkKeyScanA")) return (void *)VkKeyScanA;
	else if (0 == strcmp(name, "VkKeyScanExA")) return (void *)VkKeyScanExA;
	else if (0 == strcmp(name, "VkKeyScanExW")) return (void *)VkKeyScanExW;
	else if (0 == strcmp(name, "VkKeyScanW")) return (void *)VkKeyScanW;
	else if (0 == strcmp(name, "WaitForInputIdle")) return (void *)WaitForInputIdle;
	else if (0 == strcmp(name, "WaitMessage")) return (void *)WaitMessage;
	else if (0 == strcmp(name, "WinHelpA")) return (void *)WinHelpA;
	else if (0 == strcmp(name, "WinHelpW")) return (void *)WinHelpW;
	else if (0 == strcmp(name, "WindowFromDC")) return (void *)WindowFromDC;
	else if (0 == strcmp(name, "WindowFromPoint")) return (void *)WindowFromPoint;
	else if (0 == strcmp(name, "keybd_event")) return (void *)keybd_event;
	else if (0 == strcmp(name, "mouse_event")) return (void *)mouse_event;
	else if (0 == strcmp(name, "wsprintfA")) return (void *)wsprintfA;
	else if (0 == strcmp(name, "wvsprintfA")) return (void *)wvsprintfA;
	else if (0 == strcmp(name, "wvsprintfW")) return (void *)wvsprintfW;
	else if (0 == strcmp(name, "WINNLSEnableIME")) return (void *)WINNLSEnableIME;
	else if (0 == strcmp(name, "WINNLSGetEnableStatus")) return (void *)WINNLSGetEnableStatus;
	else if (0 == strcmp(name, "WINNLSGetIMEHotkey")) return (void *)WINNLSGetIMEHotkey;
	else if (0 == strcmp(name, "SendIMEMessageExA")) return (void *)SendIMEMessageExA;
	else if (0 == strcmp(name, "SendIMEMessageExW")) return (void *)SendIMEMessageExW;
	return NULL;
}
