void *
GetAddressByName
(const char *name)
{
	if (NULL == name) return NULL;
	else if (0 == strcmp(name, "CloseDriver")) return (void *)CloseDriver;
	else if (0 == strcmp(name, "DefDriverProc")) return (void *)DefDriverProc;
	else if (0 == strcmp(name, "DrvGetModuleHandle")) return (void *)DrvGetModuleHandle;
	else if (0 == strcmp(name, "GetDriverModuleHandle")) return (void *)GetDriverModuleHandle;
	else if (0 == strcmp(name, "OpenDriver")) return (void *)OpenDriver;
	else if (0 == strcmp(name, "PlaySoundA")) return (void *)PlaySoundA;
	else if (0 == strcmp(name, "PlaySoundW")) return (void *)PlaySoundW;
	else if (0 == strcmp(name, "SendDriverMessage")) return (void *)SendDriverMessage;
	else if (0 == strcmp(name, "auxGetDevCapsA")) return (void *)auxGetDevCapsA;
	else if (0 == strcmp(name, "auxGetDevCapsW")) return (void *)auxGetDevCapsW;
	else if (0 == strcmp(name, "auxGetNumDevs")) return (void *)auxGetNumDevs;
	else if (0 == strcmp(name, "auxGetVolume")) return (void *)auxGetVolume;
	else if (0 == strcmp(name, "auxOutMessage")) return (void *)auxOutMessage;
	else if (0 == strcmp(name, "auxSetVolume")) return (void *)auxSetVolume;
	else if (0 == strcmp(name, "joyGetDevCapsA")) return (void *)joyGetDevCapsA;
	else if (0 == strcmp(name, "joyGetDevCapsW")) return (void *)joyGetDevCapsW;
	else if (0 == strcmp(name, "joyGetNumDevs")) return (void *)joyGetNumDevs;
	else if (0 == strcmp(name, "joyGetPos")) return (void *)joyGetPos;
	else if (0 == strcmp(name, "joyGetPosEx")) return (void *)joyGetPosEx;
	else if (0 == strcmp(name, "joyGetThreshold")) return (void *)joyGetThreshold;
	else if (0 == strcmp(name, "joyReleaseCapture")) return (void *)joyReleaseCapture;
	else if (0 == strcmp(name, "joySetCapture")) return (void *)joySetCapture;
	else if (0 == strcmp(name, "joySetThreshold")) return (void *)joySetThreshold;
	else if (0 == strcmp(name, "mciGetCreatorTask")) return (void *)mciGetCreatorTask;
	else if (0 == strcmp(name, "mciGetDeviceIDA")) return (void *)mciGetDeviceIDA;
	else if (0 == strcmp(name, "mciGetDeviceIDFromElementIDA")) return (void *)mciGetDeviceIDFromElementIDA;
	else if (0 == strcmp(name, "mciGetDeviceIDFromElementIDW")) return (void *)mciGetDeviceIDFromElementIDW;
	else if (0 == strcmp(name, "mciGetDeviceIDW")) return (void *)mciGetDeviceIDW;
	else if (0 == strcmp(name, "mciGetErrorStringA")) return (void *)mciGetErrorStringA;
	else if (0 == strcmp(name, "mciGetErrorStringW")) return (void *)mciGetErrorStringW;
	else if (0 == strcmp(name, "mciGetYieldProc")) return (void *)mciGetYieldProc;
	else if (0 == strcmp(name, "mciSendCommandA")) return (void *)mciSendCommandA;
	else if (0 == strcmp(name, "mciSendCommandW")) return (void *)mciSendCommandW;
	else if (0 == strcmp(name, "mciSendStringA")) return (void *)mciSendStringA;
	else if (0 == strcmp(name, "mciSendStringW")) return (void *)mciSendStringW;
	else if (0 == strcmp(name, "mciSetYieldProc")) return (void *)mciSetYieldProc;
	else if (0 == strcmp(name, "midiConnect")) return (void *)midiConnect;
	else if (0 == strcmp(name, "midiDisconnect")) return (void *)midiDisconnect;
	else if (0 == strcmp(name, "midiInAddBuffer")) return (void *)midiInAddBuffer;
	else if (0 == strcmp(name, "midiInClose")) return (void *)midiInClose;
	else if (0 == strcmp(name, "midiInGetDevCapsA")) return (void *)midiInGetDevCapsA;
	else if (0 == strcmp(name, "midiInGetDevCapsW")) return (void *)midiInGetDevCapsW;
	else if (0 == strcmp(name, "midiInGetErrorTextA")) return (void *)midiInGetErrorTextA;
	else if (0 == strcmp(name, "midiInGetErrorTextW")) return (void *)midiInGetErrorTextW;
	else if (0 == strcmp(name, "midiInGetID")) return (void *)midiInGetID;
	else if (0 == strcmp(name, "midiInGetNumDevs")) return (void *)midiInGetNumDevs;
	else if (0 == strcmp(name, "midiInMessage")) return (void *)midiInMessage;
	else if (0 == strcmp(name, "midiInOpen")) return (void *)midiInOpen;
	else if (0 == strcmp(name, "midiInPrepareHeader")) return (void *)midiInPrepareHeader;
	else if (0 == strcmp(name, "midiInReset")) return (void *)midiInReset;
	else if (0 == strcmp(name, "midiInStart")) return (void *)midiInStart;
	else if (0 == strcmp(name, "midiInStop")) return (void *)midiInStop;
	else if (0 == strcmp(name, "midiInUnprepareHeader")) return (void *)midiInUnprepareHeader;
	else if (0 == strcmp(name, "midiOutCacheDrumPatches")) return (void *)midiOutCacheDrumPatches;
	else if (0 == strcmp(name, "midiOutCachePatches")) return (void *)midiOutCachePatches;
	else if (0 == strcmp(name, "midiOutClose")) return (void *)midiOutClose;
	else if (0 == strcmp(name, "midiOutGetDevCapsA")) return (void *)midiOutGetDevCapsA;
	else if (0 == strcmp(name, "midiOutGetDevCapsW")) return (void *)midiOutGetDevCapsW;
	else if (0 == strcmp(name, "midiOutGetErrorTextA")) return (void *)midiOutGetErrorTextA;
	else if (0 == strcmp(name, "midiOutGetErrorTextW")) return (void *)midiOutGetErrorTextW;
	else if (0 == strcmp(name, "midiOutGetID")) return (void *)midiOutGetID;
	else if (0 == strcmp(name, "midiOutGetNumDevs")) return (void *)midiOutGetNumDevs;
	else if (0 == strcmp(name, "midiOutGetVolume")) return (void *)midiOutGetVolume;
	else if (0 == strcmp(name, "midiOutLongMsg")) return (void *)midiOutLongMsg;
	else if (0 == strcmp(name, "midiOutMessage")) return (void *)midiOutMessage;
	else if (0 == strcmp(name, "midiOutOpen")) return (void *)midiOutOpen;
	else if (0 == strcmp(name, "midiOutPrepareHeader")) return (void *)midiOutPrepareHeader;
	else if (0 == strcmp(name, "midiOutReset")) return (void *)midiOutReset;
	else if (0 == strcmp(name, "midiOutSetVolume")) return (void *)midiOutSetVolume;
	else if (0 == strcmp(name, "midiOutShortMsg")) return (void *)midiOutShortMsg;
	else if (0 == strcmp(name, "midiOutUnprepareHeader")) return (void *)midiOutUnprepareHeader;
	else if (0 == strcmp(name, "midiStreamClose")) return (void *)midiStreamClose;
	else if (0 == strcmp(name, "midiStreamOpen")) return (void *)midiStreamOpen;
	else if (0 == strcmp(name, "midiStreamOut")) return (void *)midiStreamOut;
	else if (0 == strcmp(name, "midiStreamPause")) return (void *)midiStreamPause;
	else if (0 == strcmp(name, "midiStreamPosition")) return (void *)midiStreamPosition;
	else if (0 == strcmp(name, "midiStreamProperty")) return (void *)midiStreamProperty;
	else if (0 == strcmp(name, "midiStreamRestart")) return (void *)midiStreamRestart;
	else if (0 == strcmp(name, "midiStreamStop")) return (void *)midiStreamStop;
	else if (0 == strcmp(name, "mixerClose")) return (void *)mixerClose;
	else if (0 == strcmp(name, "mixerGetControlDetailsA")) return (void *)mixerGetControlDetailsA;
	else if (0 == strcmp(name, "mixerGetControlDetailsW")) return (void *)mixerGetControlDetailsW;
	else if (0 == strcmp(name, "mixerGetDevCapsA")) return (void *)mixerGetDevCapsA;
	else if (0 == strcmp(name, "mixerGetDevCapsW")) return (void *)mixerGetDevCapsW;
	else if (0 == strcmp(name, "mixerGetID")) return (void *)mixerGetID;
	else if (0 == strcmp(name, "mixerGetLineControlsA")) return (void *)mixerGetLineControlsA;
	else if (0 == strcmp(name, "mixerGetLineControlsW")) return (void *)mixerGetLineControlsW;
	else if (0 == strcmp(name, "mixerGetLineInfoA")) return (void *)mixerGetLineInfoA;
	else if (0 == strcmp(name, "mixerGetLineInfoW")) return (void *)mixerGetLineInfoW;
	else if (0 == strcmp(name, "mixerGetNumDevs")) return (void *)mixerGetNumDevs;
	else if (0 == strcmp(name, "mixerMessage")) return (void *)mixerMessage;
	else if (0 == strcmp(name, "mixerOpen")) return (void *)mixerOpen;
	else if (0 == strcmp(name, "mixerSetControlDetails")) return (void *)mixerSetControlDetails;
	else if (0 == strcmp(name, "mmioAdvance")) return (void *)mmioAdvance;
	else if (0 == strcmp(name, "mmioAscend")) return (void *)mmioAscend;
	else if (0 == strcmp(name, "mmioClose")) return (void *)mmioClose;
	else if (0 == strcmp(name, "mmioCreateChunk")) return (void *)mmioCreateChunk;
	else if (0 == strcmp(name, "mmioDescend")) return (void *)mmioDescend;
	else if (0 == strcmp(name, "mmioFlush")) return (void *)mmioFlush;
	else if (0 == strcmp(name, "mmioGetInfo")) return (void *)mmioGetInfo;
	else if (0 == strcmp(name, "mmioInstallIOProcA")) return (void *)mmioInstallIOProcA;
	else if (0 == strcmp(name, "mmioInstallIOProcW")) return (void *)mmioInstallIOProcW;
	else if (0 == strcmp(name, "mmioOpenA")) return (void *)mmioOpenA;
	else if (0 == strcmp(name, "mmioOpenW")) return (void *)mmioOpenW;
	else if (0 == strcmp(name, "mmioRead")) return (void *)mmioRead;
	else if (0 == strcmp(name, "mmioRenameA")) return (void *)mmioRenameA;
	else if (0 == strcmp(name, "mmioRenameW")) return (void *)mmioRenameW;
	else if (0 == strcmp(name, "mmioSeek")) return (void *)mmioSeek;
	else if (0 == strcmp(name, "mmioSendMessage")) return (void *)mmioSendMessage;
	else if (0 == strcmp(name, "mmioSetBuffer")) return (void *)mmioSetBuffer;
	else if (0 == strcmp(name, "mmioSetInfo")) return (void *)mmioSetInfo;
	else if (0 == strcmp(name, "mmioStringToFOURCCA")) return (void *)mmioStringToFOURCCA;
	else if (0 == strcmp(name, "mmioStringToFOURCCW")) return (void *)mmioStringToFOURCCW;
	else if (0 == strcmp(name, "mmioWrite")) return (void *)mmioWrite;
	else if (0 == strcmp(name, "mmsystemGetVersion")) return (void *)mmsystemGetVersion;
	else if (0 == strcmp(name, "sndPlaySoundA")) return (void *)sndPlaySoundA;
	else if (0 == strcmp(name, "sndPlaySoundW")) return (void *)sndPlaySoundW;
	else if (0 == strcmp(name, "timeBeginPeriod")) return (void *)timeBeginPeriod;
	else if (0 == strcmp(name, "timeEndPeriod")) return (void *)timeEndPeriod;
	else if (0 == strcmp(name, "timeGetDevCaps")) return (void *)timeGetDevCaps;
	else if (0 == strcmp(name, "timeGetSystemTime")) return (void *)timeGetSystemTime;
	else if (0 == strcmp(name, "timeGetTime")) return (void *)timeGetTime;
	else if (0 == strcmp(name, "timeKillEvent")) return (void *)timeKillEvent;
	else if (0 == strcmp(name, "timeSetEvent")) return (void *)timeSetEvent;
	else if (0 == strcmp(name, "waveInAddBuffer")) return (void *)waveInAddBuffer;
	else if (0 == strcmp(name, "waveInClose")) return (void *)waveInClose;
	else if (0 == strcmp(name, "waveInGetDevCapsA")) return (void *)waveInGetDevCapsA;
	else if (0 == strcmp(name, "waveInGetDevCapsW")) return (void *)waveInGetDevCapsW;
	else if (0 == strcmp(name, "waveInGetErrorTextA")) return (void *)waveInGetErrorTextA;
	else if (0 == strcmp(name, "waveInGetErrorTextW")) return (void *)waveInGetErrorTextW;
	else if (0 == strcmp(name, "waveInGetID")) return (void *)waveInGetID;
	else if (0 == strcmp(name, "waveInGetNumDevs")) return (void *)waveInGetNumDevs;
	else if (0 == strcmp(name, "waveInGetPosition")) return (void *)waveInGetPosition;
	else if (0 == strcmp(name, "waveInMessage")) return (void *)waveInMessage;
	else if (0 == strcmp(name, "waveInOpen")) return (void *)waveInOpen;
	else if (0 == strcmp(name, "waveInPrepareHeader")) return (void *)waveInPrepareHeader;
	else if (0 == strcmp(name, "waveInReset")) return (void *)waveInReset;
	else if (0 == strcmp(name, "waveInStart")) return (void *)waveInStart;
	else if (0 == strcmp(name, "waveInStop")) return (void *)waveInStop;
	else if (0 == strcmp(name, "waveInUnprepareHeader")) return (void *)waveInUnprepareHeader;
	else if (0 == strcmp(name, "waveOutBreakLoop")) return (void *)waveOutBreakLoop;
	else if (0 == strcmp(name, "waveOutClose")) return (void *)waveOutClose;
	else if (0 == strcmp(name, "waveOutGetDevCapsA")) return (void *)waveOutGetDevCapsA;
	else if (0 == strcmp(name, "waveOutGetDevCapsW")) return (void *)waveOutGetDevCapsW;
	else if (0 == strcmp(name, "waveOutGetErrorTextA")) return (void *)waveOutGetErrorTextA;
	else if (0 == strcmp(name, "waveOutGetErrorTextW")) return (void *)waveOutGetErrorTextW;
	else if (0 == strcmp(name, "waveOutGetID")) return (void *)waveOutGetID;
	else if (0 == strcmp(name, "waveOutGetNumDevs")) return (void *)waveOutGetNumDevs;
	else if (0 == strcmp(name, "waveOutGetPitch")) return (void *)waveOutGetPitch;
	else if (0 == strcmp(name, "waveOutGetPlaybackRate")) return (void *)waveOutGetPlaybackRate;
	else if (0 == strcmp(name, "waveOutGetPosition")) return (void *)waveOutGetPosition;
	else if (0 == strcmp(name, "waveOutGetVolume")) return (void *)waveOutGetVolume;
	else if (0 == strcmp(name, "waveOutMessage")) return (void *)waveOutMessage;
	else if (0 == strcmp(name, "waveOutOpen")) return (void *)waveOutOpen;
	else if (0 == strcmp(name, "waveOutPause")) return (void *)waveOutPause;
	else if (0 == strcmp(name, "waveOutPrepareHeader")) return (void *)waveOutPrepareHeader;
	else if (0 == strcmp(name, "waveOutReset")) return (void *)waveOutReset;
	else if (0 == strcmp(name, "waveOutRestart")) return (void *)waveOutRestart;
	else if (0 == strcmp(name, "waveOutSetPitch")) return (void *)waveOutSetPitch;
	else if (0 == strcmp(name, "waveOutSetPlaybackRate")) return (void *)waveOutSetPlaybackRate;
	else if (0 == strcmp(name, "waveOutSetVolume")) return (void *)waveOutSetVolume;
	else if (0 == strcmp(name, "waveOutUnprepareHeader")) return (void *)waveOutUnprepareHeader;
	else if (0 == strcmp(name, "waveOutWrite")) return (void *)waveOutWrite;
	return NULL;
}
