void *
GetAddressByName
(const char *name)
{
	if (NULL == name) return NULL;
	else if (0 == strcmp(name, "AddAtomA")) return (void *)AddAtomA;
	else if (0 == strcmp(name, "AddAtomW")) return (void *)AddAtomW;
	else if (0 == strcmp(name, "AllocConsole")) return (void *)AllocConsole;
	else if (0 == strcmp(name, "AreFileApisANSI")) return (void *)AreFileApisANSI;
	else if (0 == strcmp(name, "BackupRead")) return (void *)BackupRead;
	else if (0 == strcmp(name, "BackupSeek")) return (void *)BackupSeek;
	else if (0 == strcmp(name, "BackupWrite")) return (void *)BackupWrite;
	else if (0 == strcmp(name, "Beep")) return (void *)Beep;
	else if (0 == strcmp(name, "BeginUpdateResourceA")) return (void *)BeginUpdateResourceA;
	else if (0 == strcmp(name, "BeginUpdateResourceW")) return (void *)BeginUpdateResourceW;
	else if (0 == strcmp(name, "BuildCommDCBA")) return (void *)BuildCommDCBA;
	else if (0 == strcmp(name, "BuildCommDCBAndTimeoutsA")) return (void *)BuildCommDCBAndTimeoutsA;
	else if (0 == strcmp(name, "BuildCommDCBAndTimeoutsW")) return (void *)BuildCommDCBAndTimeoutsW;
	else if (0 == strcmp(name, "BuildCommDCBW")) return (void *)BuildCommDCBW;
	else if (0 == strcmp(name, "CallNamedPipeA")) return (void *)CallNamedPipeA;
	else if (0 == strcmp(name, "CallNamedPipeW")) return (void *)CallNamedPipeW;
	else if (0 == strcmp(name, "CancelIo")) return (void *)CancelIo;
	else if (0 == strcmp(name, "CancelWaitableTimer")) return (void *)CancelWaitableTimer;
	else if (0 == strcmp(name, "ClearCommBreak")) return (void *)ClearCommBreak;
	else if (0 == strcmp(name, "ClearCommError")) return (void *)ClearCommError;
	else if (0 == strcmp(name, "CmdBatNotification")) return (void *)CmdBatNotification;
	else if (0 == strcmp(name, "CloseHandle")) return (void *)CloseHandle;
	else if (0 == strcmp(name, "CommConfigDialogA")) return (void *)CommConfigDialogA;
	else if (0 == strcmp(name, "CommConfigDialogW")) return (void *)CommConfigDialogW;
	else if (0 == strcmp(name, "CompareFileTime")) return (void *)CompareFileTime;
	else if (0 == strcmp(name, "CompareStringA")) return (void *)CompareStringA;
	else if (0 == strcmp(name, "CompareStringW")) return (void *)CompareStringW;
	else if (0 == strcmp(name, "ConnectNamedPipe")) return (void *)ConnectNamedPipe;
	else if (0 == strcmp(name, "ContinueDebugEvent")) return (void *)ContinueDebugEvent;
	else if (0 == strcmp(name, "ConvertDefaultLocale")) return (void *)ConvertDefaultLocale;
	else if (0 == strcmp(name, "ConvertThreadToFiber")) return (void *)ConvertThreadToFiber;
	else if (0 == strcmp(name, "CopyFileA")) return (void *)CopyFileA;
	else if (0 == strcmp(name, "CopyFileW")) return (void *)CopyFileW;
	else if (0 == strcmp(name, "CopyFileExA")) return (void *)CopyFileExA;
	else if (0 == strcmp(name, "CopyFileExW")) return (void *)CopyFileExW;
	else if (0 == strcmp(name, "CreateConsoleScreenBuffer")) return (void *)CreateConsoleScreenBuffer;
	else if (0 == strcmp(name, "CreateDirectoryA")) return (void *)CreateDirectoryA;
	else if (0 == strcmp(name, "CreateDirectoryExA")) return (void *)CreateDirectoryExA;
	else if (0 == strcmp(name, "CreateDirectoryExW")) return (void *)CreateDirectoryExW;
	else if (0 == strcmp(name, "CreateDirectoryW")) return (void *)CreateDirectoryW;
	else if (0 == strcmp(name, "CreateEventA")) return (void *)CreateEventA;
	else if (0 == strcmp(name, "CreateEventW")) return (void *)CreateEventW;
	else if (0 == strcmp(name, "CreateFiber")) return (void *)CreateFiber;
	else if (0 == strcmp(name, "CreateFileA")) return (void *)CreateFileA;
	else if (0 == strcmp(name, "CreateFileMappingA")) return (void *)CreateFileMappingA;
	else if (0 == strcmp(name, "CreateFileMappingW")) return (void *)CreateFileMappingW;
	else if (0 == strcmp(name, "CreateFileW")) return (void *)CreateFileW;
	else if (0 == strcmp(name, "CreateHardLinkA")) return (void *)CreateHardLinkA;
	else if (0 == strcmp(name, "CreateHardLinkW")) return (void *)CreateHardLinkW;
	else if (0 == strcmp(name, "CreateIoCompletionPort")) return (void *)CreateIoCompletionPort;
	else if (0 == strcmp(name, "CreateMailslotA")) return (void *)CreateMailslotA;
	else if (0 == strcmp(name, "CreateMailslotW")) return (void *)CreateMailslotW;
	else if (0 == strcmp(name, "CreateMutexA")) return (void *)CreateMutexA;
	else if (0 == strcmp(name, "CreateMutexW")) return (void *)CreateMutexW;
	else if (0 == strcmp(name, "CreateNamedPipeA")) return (void *)CreateNamedPipeA;
	else if (0 == strcmp(name, "CreateNamedPipeW")) return (void *)CreateNamedPipeW;
	else if (0 == strcmp(name, "CreatePipe")) return (void *)CreatePipe;
	else if (0 == strcmp(name, "CreateProcessA")) return (void *)CreateProcessA;
	else if (0 == strcmp(name, "CreateProcessW")) return (void *)CreateProcessW;
	else if (0 == strcmp(name, "CreateRemoteThread")) return (void *)CreateRemoteThread;
	else if (0 == strcmp(name, "CreateSemaphoreA")) return (void *)CreateSemaphoreA;
	else if (0 == strcmp(name, "CreateSemaphoreW")) return (void *)CreateSemaphoreW;
	else if (0 == strcmp(name, "CreateTapePartition")) return (void *)CreateTapePartition;
	else if (0 == strcmp(name, "CreateThread")) return (void *)CreateThread;
	else if (0 == strcmp(name, "CreateToolhelp32Snapshot")) return (void *)CreateToolhelp32Snapshot;
	else if (0 == strcmp(name, "CreateWaitableTimerA")) return (void *)CreateWaitableTimerA;
	else if (0 == strcmp(name, "CreateWaitableTimerW")) return (void *)CreateWaitableTimerW;
	else if (0 == strcmp(name, "DebugActiveProcess")) return (void *)DebugActiveProcess;
	else if (0 == strcmp(name, "DebugBreak")) return (void *)DebugBreak;
	else if (0 == strcmp(name, "DefineDosDeviceA")) return (void *)DefineDosDeviceA;
	else if (0 == strcmp(name, "DefineDosDeviceW")) return (void *)DefineDosDeviceW;
	else if (0 == strcmp(name, "DeleteAtom")) return (void *)DeleteAtom;
	else if (0 == strcmp(name, "DeleteCriticalSection")) return (void *)DeleteCriticalSection;
	else if (0 == strcmp(name, "DeleteFiber")) return (void *)DeleteFiber;
	else if (0 == strcmp(name, "DeleteFileA")) return (void *)DeleteFileA;
	else if (0 == strcmp(name, "DeleteFileW")) return (void *)DeleteFileW;
	else if (0 == strcmp(name, "DeviceIoControl")) return (void *)DeviceIoControl;
	else if (0 == strcmp(name, "DisableThreadLibraryCalls")) return (void *)DisableThreadLibraryCalls;
	else if (0 == strcmp(name, "DisconnectNamedPipe")) return (void *)DisconnectNamedPipe;
	else if (0 == strcmp(name, "DosDateTimeToFileTime")) return (void *)DosDateTimeToFileTime;
	else if (0 == strcmp(name, "DuplicateHandle")) return (void *)DuplicateHandle;
	else if (0 == strcmp(name, "EndUpdateResourceA")) return (void *)EndUpdateResourceA;
	else if (0 == strcmp(name, "EndUpdateResourceW")) return (void *)EndUpdateResourceW;
	else if (0 == strcmp(name, "EnterCriticalSection")) return (void *)EnterCriticalSection;
	else if (0 == strcmp(name, "EnumCalendarInfoA")) return (void *)EnumCalendarInfoA;
	else if (0 == strcmp(name, "EnumCalendarInfoW")) return (void *)EnumCalendarInfoW;
	else if (0 == strcmp(name, "EnumCalendarInfoExA")) return (void *)EnumCalendarInfoExA;
	else if (0 == strcmp(name, "EnumCalendarInfoExW")) return (void *)EnumCalendarInfoExW;
	else if (0 == strcmp(name, "EnumDateFormatsA")) return (void *)EnumDateFormatsA;
	else if (0 == strcmp(name, "EnumDateFormatsW")) return (void *)EnumDateFormatsW;
	else if (0 == strcmp(name, "EnumDateFormatsExA")) return (void *)EnumDateFormatsExA;
	else if (0 == strcmp(name, "EnumDateFormatsExW")) return (void *)EnumDateFormatsExW;
	else if (0 == strcmp(name, "EnumResourceLanguagesA")) return (void *)EnumResourceLanguagesA;
	else if (0 == strcmp(name, "EnumResourceLanguagesW")) return (void *)EnumResourceLanguagesW;
	else if (0 == strcmp(name, "EnumResourceNamesA")) return (void *)EnumResourceNamesA;
	else if (0 == strcmp(name, "EnumResourceNamesW")) return (void *)EnumResourceNamesW;
	else if (0 == strcmp(name, "EnumResourceTypesA")) return (void *)EnumResourceTypesA;
	else if (0 == strcmp(name, "EnumResourceTypesW")) return (void *)EnumResourceTypesW;
	else if (0 == strcmp(name, "EnumSystemCodePagesA")) return (void *)EnumSystemCodePagesA;
	else if (0 == strcmp(name, "EnumSystemCodePagesW")) return (void *)EnumSystemCodePagesW;
	else if (0 == strcmp(name, "EnumSystemLocalesA")) return (void *)EnumSystemLocalesA;
	else if (0 == strcmp(name, "EnumSystemLocalesW")) return (void *)EnumSystemLocalesW;
	else if (0 == strcmp(name, "EnumTimeFormatsA")) return (void *)EnumTimeFormatsA;
	else if (0 == strcmp(name, "EnumTimeFormatsW")) return (void *)EnumTimeFormatsW;
	else if (0 == strcmp(name, "EraseTape")) return (void *)EraseTape;
	else if (0 == strcmp(name, "EscapeCommFunction")) return (void *)EscapeCommFunction;
	else if (0 == strcmp(name, "ExitProcess")) return (void *)ExitProcess;
	else if (0 == strcmp(name, "ExitThread")) return (void *)ExitThread;
	else if (0 == strcmp(name, "ExpandEnvironmentStringsA")) return (void *)ExpandEnvironmentStringsA;
	else if (0 == strcmp(name, "ExpandEnvironmentStringsW")) return (void *)ExpandEnvironmentStringsW;
	else if (0 == strcmp(name, "FatalAppExitA")) return (void *)FatalAppExitA;
	else if (0 == strcmp(name, "FatalAppExitW")) return (void *)FatalAppExitW;
	else if (0 == strcmp(name, "FatalExit")) return (void *)FatalExit;
	else if (0 == strcmp(name, "FileTimeToDosDateTime")) return (void *)FileTimeToDosDateTime;
	else if (0 == strcmp(name, "FileTimeToLocalFileTime")) return (void *)FileTimeToLocalFileTime;
	else if (0 == strcmp(name, "FileTimeToSystemTime")) return (void *)FileTimeToSystemTime;
	else if (0 == strcmp(name, "FillConsoleOutputAttribute")) return (void *)FillConsoleOutputAttribute;
	else if (0 == strcmp(name, "FillConsoleOutputCharacterA")) return (void *)FillConsoleOutputCharacterA;
	else if (0 == strcmp(name, "FillConsoleOutputCharacterW")) return (void *)FillConsoleOutputCharacterW;
	else if (0 == strcmp(name, "FindAtomA")) return (void *)FindAtomA;
	else if (0 == strcmp(name, "FindAtomW")) return (void *)FindAtomW;
	else if (0 == strcmp(name, "FindClose")) return (void *)FindClose;
	else if (0 == strcmp(name, "FindCloseChangeNotification")) return (void *)FindCloseChangeNotification;
	else if (0 == strcmp(name, "FindFirstChangeNotificationA")) return (void *)FindFirstChangeNotificationA;
	else if (0 == strcmp(name, "FindFirstChangeNotificationW")) return (void *)FindFirstChangeNotificationW;
	else if (0 == strcmp(name, "FindFirstFileA")) return (void *)FindFirstFileA;
	else if (0 == strcmp(name, "FindFirstFileW")) return (void *)FindFirstFileW;
	else if (0 == strcmp(name, "FindFirstFileExA")) return (void *)FindFirstFileExA;
	else if (0 == strcmp(name, "FindFirstFileExW")) return (void *)FindFirstFileExW;
	else if (0 == strcmp(name, "FindNextChangeNotification")) return (void *)FindNextChangeNotification;
	else if (0 == strcmp(name, "FindNextFileA")) return (void *)FindNextFileA;
	else if (0 == strcmp(name, "FindNextFileW")) return (void *)FindNextFileW;
	else if (0 == strcmp(name, "FindResourceA")) return (void *)FindResourceA;
	else if (0 == strcmp(name, "FindResourceExA")) return (void *)FindResourceExA;
	else if (0 == strcmp(name, "FindResourceExW")) return (void *)FindResourceExW;
	else if (0 == strcmp(name, "FindResourceW")) return (void *)FindResourceW;
	else if (0 == strcmp(name, "FlushConsoleInputBuffer")) return (void *)FlushConsoleInputBuffer;
	else if (0 == strcmp(name, "FlushFileBuffers")) return (void *)FlushFileBuffers;
	else if (0 == strcmp(name, "FlushInstructionCache")) return (void *)FlushInstructionCache;
	else if (0 == strcmp(name, "FlushViewOfFile")) return (void *)FlushViewOfFile;
	else if (0 == strcmp(name, "FoldStringA")) return (void *)FoldStringA;
	else if (0 == strcmp(name, "FoldStringW")) return (void *)FoldStringW;
	else if (0 == strcmp(name, "FormatMessageA")) return (void *)FormatMessageA;
	else if (0 == strcmp(name, "FormatMessageW")) return (void *)FormatMessageW;
	else if (0 == strcmp(name, "FreeConsole")) return (void *)FreeConsole;
	else if (0 == strcmp(name, "FreeEnvironmentStringsA")) return (void *)FreeEnvironmentStringsA;
	else if (0 == strcmp(name, "FreeEnvironmentStringsW")) return (void *)FreeEnvironmentStringsW;
	else if (0 == strcmp(name, "FreeLibrary")) return (void *)FreeLibrary;
	else if (0 == strcmp(name, "FreeLibraryAndExitThread")) return (void *)FreeLibraryAndExitThread;
	else if (0 == strcmp(name, "FreeResource")) return (void *)FreeResource;
	else if (0 == strcmp(name, "GenerateConsoleCtrlEvent")) return (void *)GenerateConsoleCtrlEvent;
	else if (0 == strcmp(name, "GetACP")) return (void *)GetACP;
	else if (0 == strcmp(name, "GetAtomNameA")) return (void *)GetAtomNameA;
	else if (0 == strcmp(name, "GetAtomNameW")) return (void *)GetAtomNameW;
	else if (0 == strcmp(name, "GetBinaryTypeA")) return (void *)GetBinaryTypeA;
	else if (0 == strcmp(name, "GetBinaryTypeW")) return (void *)GetBinaryTypeW;
	else if (0 == strcmp(name, "GetCPInfo")) return (void *)GetCPInfo;
	else if (0 == strcmp(name, "GetCPInfoExA")) return (void *)GetCPInfoExA;
	else if (0 == strcmp(name, "GetCPInfoExW")) return (void *)GetCPInfoExW;
	else if (0 == strcmp(name, "GetCommConfig")) return (void *)GetCommConfig;
	else if (0 == strcmp(name, "GetCommMask")) return (void *)GetCommMask;
	else if (0 == strcmp(name, "GetCommModemStatus")) return (void *)GetCommModemStatus;
	else if (0 == strcmp(name, "GetCommProperties")) return (void *)GetCommProperties;
	else if (0 == strcmp(name, "GetCommState")) return (void *)GetCommState;
	else if (0 == strcmp(name, "GetCommTimeouts")) return (void *)GetCommTimeouts;
	else if (0 == strcmp(name, "GetCommandLineA")) return (void *)GetCommandLineA;
	else if (0 == strcmp(name, "GetCommandLineW")) return (void *)GetCommandLineW;
	else if (0 == strcmp(name, "GetCompressedFileSizeA")) return (void *)GetCompressedFileSizeA;
	else if (0 == strcmp(name, "GetCompressedFileSizeW")) return (void *)GetCompressedFileSizeW;
	else if (0 == strcmp(name, "GetComputerNameA")) return (void *)GetComputerNameA;
	else if (0 == strcmp(name, "GetComputerNameW")) return (void *)GetComputerNameW;
	else if (0 == strcmp(name, "GetConsoleCP")) return (void *)GetConsoleCP;
	else if (0 == strcmp(name, "GetConsoleCursorInfo")) return (void *)GetConsoleCursorInfo;
	else if (0 == strcmp(name, "GetConsoleMode")) return (void *)GetConsoleMode;
	else if (0 == strcmp(name, "GetConsoleOutputCP")) return (void *)GetConsoleOutputCP;
	else if (0 == strcmp(name, "GetConsoleScreenBufferInfo")) return (void *)GetConsoleScreenBufferInfo;
	else if (0 == strcmp(name, "GetConsoleTitleA")) return (void *)GetConsoleTitleA;
	else if (0 == strcmp(name, "GetConsoleTitleW")) return (void *)GetConsoleTitleW;
	else if (0 == strcmp(name, "GetCurrencyFormatA")) return (void *)GetCurrencyFormatA;
	else if (0 == strcmp(name, "GetCurrencyFormatW")) return (void *)GetCurrencyFormatW;
	else if (0 == strcmp(name, "GetCurrentDirectoryA")) return (void *)GetCurrentDirectoryA;
	else if (0 == strcmp(name, "GetCurrentDirectoryW")) return (void *)GetCurrentDirectoryW;
	else if (0 == strcmp(name, "GetCurrentProcess")) return (void *)GetCurrentProcess;
	else if (0 == strcmp(name, "GetCurrentProcessId")) return (void *)GetCurrentProcessId;
	else if (0 == strcmp(name, "GetCurrentThread")) return (void *)GetCurrentThread;
	else if (0 == strcmp(name, "GetCurrentThreadId")) return (void *)GetCurrentThreadId;
	else if (0 == strcmp(name, "GetDateFormatA")) return (void *)GetDateFormatA;
	else if (0 == strcmp(name, "GetDateFormatW")) return (void *)GetDateFormatW;
	else if (0 == strcmp(name, "GetDefaultCommConfigA")) return (void *)GetDefaultCommConfigA;
	else if (0 == strcmp(name, "GetDefaultCommConfigW")) return (void *)GetDefaultCommConfigW;
	else if (0 == strcmp(name, "GetDiskFreeSpaceA")) return (void *)GetDiskFreeSpaceA;
	else if (0 == strcmp(name, "GetDiskFreeSpaceW")) return (void *)GetDiskFreeSpaceW;
	else if (0 == strcmp(name, "GetDiskFreeSpaceExA")) return (void *)GetDiskFreeSpaceExA;
	else if (0 == strcmp(name, "GetDiskFreeSpaceExW")) return (void *)GetDiskFreeSpaceExW;
	else if (0 == strcmp(name, "GetDriveTypeA")) return (void *)GetDriveTypeA;
	else if (0 == strcmp(name, "GetDriveTypeW")) return (void *)GetDriveTypeW;
	else if (0 == strcmp(name, "GetEnvironmentStrings")) return (void *)GetEnvironmentStrings;
	else if (0 == strcmp(name, "GetEnvironmentStringsA")) return (void *)GetEnvironmentStringsA;
	else if (0 == strcmp(name, "GetEnvironmentStringsW")) return (void *)GetEnvironmentStringsW;
	else if (0 == strcmp(name, "GetEnvironmentVariableA")) return (void *)GetEnvironmentVariableA;
	else if (0 == strcmp(name, "GetEnvironmentVariableW")) return (void *)GetEnvironmentVariableW;
	else if (0 == strcmp(name, "GetExitCodeProcess")) return (void *)GetExitCodeProcess;
	else if (0 == strcmp(name, "GetExitCodeThread")) return (void *)GetExitCodeThread;
	else if (0 == strcmp(name, "GetFileAttributesA")) return (void *)GetFileAttributesA;
	else if (0 == strcmp(name, "GetFileAttributesW")) return (void *)GetFileAttributesW;
	else if (0 == strcmp(name, "GetFileAttributesExA")) return (void *)GetFileAttributesExA;
	else if (0 == strcmp(name, "GetFileAttributesExW")) return (void *)GetFileAttributesExW;
	else if (0 == strcmp(name, "GetFileInformationByHandle")) return (void *)GetFileInformationByHandle;
	else if (0 == strcmp(name, "GetFileSize")) return (void *)GetFileSize;
	else if (0 == strcmp(name, "GetFileTime")) return (void *)GetFileTime;
	else if (0 == strcmp(name, "GetFileType")) return (void *)GetFileType;
	else if (0 == strcmp(name, "GetFullPathNameA")) return (void *)GetFullPathNameA;
	else if (0 == strcmp(name, "GetFullPathNameW")) return (void *)GetFullPathNameW;
	else if (0 == strcmp(name, "GetHandleInformation")) return (void *)GetHandleInformation;
	else if (0 == strcmp(name, "GetLargestConsoleWindowSize")) return (void *)GetLargestConsoleWindowSize;
	else if (0 == strcmp(name, "GetLastError")) return (void *)GetLastError;
	else if (0 == strcmp(name, "GetLocalTime")) return (void *)GetLocalTime;
	else if (0 == strcmp(name, "GetLocaleInfoA")) return (void *)GetLocaleInfoA;
	else if (0 == strcmp(name, "GetLocaleInfoW")) return (void *)GetLocaleInfoW;
	else if (0 == strcmp(name, "GetLogicalDriveStringsA")) return (void *)GetLogicalDriveStringsA;
	else if (0 == strcmp(name, "GetLogicalDriveStringsW")) return (void *)GetLogicalDriveStringsW;
	else if (0 == strcmp(name, "GetLogicalDrives")) return (void *)GetLogicalDrives;
	else if (0 == strcmp(name, "GetLongPathNameA")) return (void *)GetLongPathNameA;
	else if (0 == strcmp(name, "GetLongPathNameW")) return (void *)GetLongPathNameW;
	else if (0 == strcmp(name, "GetMailslotInfo")) return (void *)GetMailslotInfo;
	else if (0 == strcmp(name, "GetModuleFileNameA")) return (void *)GetModuleFileNameA;
	else if (0 == strcmp(name, "GetModuleFileNameW")) return (void *)GetModuleFileNameW;
	else if (0 == strcmp(name, "GetModuleHandleA")) return (void *)GetModuleHandleA;
	else if (0 == strcmp(name, "GetModuleHandleW")) return (void *)GetModuleHandleW;
	else if (0 == strcmp(name, "GetNamedPipeHandleStateA")) return (void *)GetNamedPipeHandleStateA;
	else if (0 == strcmp(name, "GetNamedPipeHandleStateW")) return (void *)GetNamedPipeHandleStateW;
	else if (0 == strcmp(name, "GetNamedPipeInfo")) return (void *)GetNamedPipeInfo;
	else if (0 == strcmp(name, "GetNumberFormatA")) return (void *)GetNumberFormatA;
	else if (0 == strcmp(name, "GetNumberFormatW")) return (void *)GetNumberFormatW;
	else if (0 == strcmp(name, "GetNumberOfConsoleInputEvents")) return (void *)GetNumberOfConsoleInputEvents;
	else if (0 == strcmp(name, "GetNumberOfConsoleMouseButtons")) return (void *)GetNumberOfConsoleMouseButtons;
	else if (0 == strcmp(name, "GetOEMCP")) return (void *)GetOEMCP;
	else if (0 == strcmp(name, "GetOverlappedResult")) return (void *)GetOverlappedResult;
	else if (0 == strcmp(name, "GetPriorityClass")) return (void *)GetPriorityClass;
	else if (0 == strcmp(name, "GetPrivateProfileIntA")) return (void *)GetPrivateProfileIntA;
	else if (0 == strcmp(name, "GetPrivateProfileIntW")) return (void *)GetPrivateProfileIntW;
	else if (0 == strcmp(name, "GetPrivateProfileSectionA")) return (void *)GetPrivateProfileSectionA;
	else if (0 == strcmp(name, "GetPrivateProfileSectionNamesA")) return (void *)GetPrivateProfileSectionNamesA;
	else if (0 == strcmp(name, "GetPrivateProfileSectionNamesW")) return (void *)GetPrivateProfileSectionNamesW;
	else if (0 == strcmp(name, "GetPrivateProfileSectionW")) return (void *)GetPrivateProfileSectionW;
	else if (0 == strcmp(name, "GetPrivateProfileStringA")) return (void *)GetPrivateProfileStringA;
	else if (0 == strcmp(name, "GetPrivateProfileStringW")) return (void *)GetPrivateProfileStringW;
	else if (0 == strcmp(name, "GetPrivateProfileStructA")) return (void *)GetPrivateProfileStructA;
	else if (0 == strcmp(name, "GetPrivateProfileStructW")) return (void *)GetPrivateProfileStructW;
	else if (0 == strcmp(name, "GetProcAddress")) return (void *)GetProcAddress;
	else if (0 == strcmp(name, "GetProcessAffinityMask")) return (void *)GetProcessAffinityMask;
	else if (0 == strcmp(name, "GetProcessHeap")) return (void *)GetProcessHeap;
	else if (0 == strcmp(name, "GetProcessHeaps")) return (void *)GetProcessHeaps;
	else if (0 == strcmp(name, "GetProcessPriorityBoost")) return (void *)GetProcessPriorityBoost;
	else if (0 == strcmp(name, "GetProcessShutdownParameters")) return (void *)GetProcessShutdownParameters;
	else if (0 == strcmp(name, "GetProcessTimes")) return (void *)GetProcessTimes;
	else if (0 == strcmp(name, "GetProcessVersion")) return (void *)GetProcessVersion;
	else if (0 == strcmp(name, "GetProcessWorkingSetSize")) return (void *)GetProcessWorkingSetSize;
	else if (0 == strcmp(name, "GetProfileIntA")) return (void *)GetProfileIntA;
	else if (0 == strcmp(name, "GetProfileIntW")) return (void *)GetProfileIntW;
	else if (0 == strcmp(name, "GetProfileSectionA")) return (void *)GetProfileSectionA;
	else if (0 == strcmp(name, "GetProfileSectionW")) return (void *)GetProfileSectionW;
	else if (0 == strcmp(name, "GetProfileStringA")) return (void *)GetProfileStringA;
	else if (0 == strcmp(name, "GetProfileStringW")) return (void *)GetProfileStringW;
	else if (0 == strcmp(name, "GetQueuedCompletionStatus")) return (void *)GetQueuedCompletionStatus;
	else if (0 == strcmp(name, "GetShortPathNameA")) return (void *)GetShortPathNameA;
	else if (0 == strcmp(name, "GetShortPathNameW")) return (void *)GetShortPathNameW;
	else if (0 == strcmp(name, "GetStartupInfoA")) return (void *)GetStartupInfoA;
	else if (0 == strcmp(name, "GetStartupInfoW")) return (void *)GetStartupInfoW;
	else if (0 == strcmp(name, "GetStdHandle")) return (void *)GetStdHandle;
	else if (0 == strcmp(name, "GetStringTypeA")) return (void *)GetStringTypeA;
	else if (0 == strcmp(name, "GetStringTypeExA")) return (void *)GetStringTypeExA;
	else if (0 == strcmp(name, "GetStringTypeExW")) return (void *)GetStringTypeExW;
	else if (0 == strcmp(name, "GetStringTypeW")) return (void *)GetStringTypeW;
	else if (0 == strcmp(name, "GetSystemDefaultLCID")) return (void *)GetSystemDefaultLCID;
	else if (0 == strcmp(name, "GetSystemDefaultLangID")) return (void *)GetSystemDefaultLangID;
	else if (0 == strcmp(name, "GetSystemDirectoryA")) return (void *)GetSystemDirectoryA;
	else if (0 == strcmp(name, "GetSystemDirectoryW")) return (void *)GetSystemDirectoryW;
	else if (0 == strcmp(name, "GetSystemInfo")) return (void *)GetSystemInfo;
	else if (0 == strcmp(name, "GetSystemPowerStatus")) return (void *)GetSystemPowerStatus;
	else if (0 == strcmp(name, "GetSystemTime")) return (void *)GetSystemTime;
	else if (0 == strcmp(name, "GetSystemTimeAdjustment")) return (void *)GetSystemTimeAdjustment;
	else if (0 == strcmp(name, "GetSystemTimeAsFileTime")) return (void *)GetSystemTimeAsFileTime;
	else if (0 == strcmp(name, "GetTapeParameters")) return (void *)GetTapeParameters;
	else if (0 == strcmp(name, "GetTapePosition")) return (void *)GetTapePosition;
	else if (0 == strcmp(name, "GetTapeStatus")) return (void *)GetTapeStatus;
	else if (0 == strcmp(name, "GetTempFileNameA")) return (void *)GetTempFileNameA;
	else if (0 == strcmp(name, "GetTempFileNameW")) return (void *)GetTempFileNameW;
	else if (0 == strcmp(name, "GetTempPathA")) return (void *)GetTempPathA;
	else if (0 == strcmp(name, "GetTempPathW")) return (void *)GetTempPathW;
	else if (0 == strcmp(name, "GetThreadContext")) return (void *)GetThreadContext;
	else if (0 == strcmp(name, "GetThreadLocale")) return (void *)GetThreadLocale;
	else if (0 == strcmp(name, "GetThreadPriority")) return (void *)GetThreadPriority;
	else if (0 == strcmp(name, "GetThreadPriorityBoost")) return (void *)GetThreadPriorityBoost;
	else if (0 == strcmp(name, "GetThreadSelectorEntry")) return (void *)GetThreadSelectorEntry;
	else if (0 == strcmp(name, "GetThreadTimes")) return (void *)GetThreadTimes;
	else if (0 == strcmp(name, "GetTickCount")) return (void *)GetTickCount;
	else if (0 == strcmp(name, "GetTimeFormatA")) return (void *)GetTimeFormatA;
	else if (0 == strcmp(name, "GetTimeFormatW")) return (void *)GetTimeFormatW;
	else if (0 == strcmp(name, "GetTimeZoneInformation")) return (void *)GetTimeZoneInformation;
	else if (0 == strcmp(name, "GetUserDefaultLCID")) return (void *)GetUserDefaultLCID;
	else if (0 == strcmp(name, "GetUserDefaultLangID")) return (void *)GetUserDefaultLangID;
	else if (0 == strcmp(name, "GetVDMCurrentDirectories")) return (void *)GetVDMCurrentDirectories;
	else if (0 == strcmp(name, "GetVersion")) return (void *)GetVersion;
	else if (0 == strcmp(name, "GetVersionExA")) return (void *)GetVersionExA;
	else if (0 == strcmp(name, "GetVersionExW")) return (void *)GetVersionExW;
	else if (0 == strcmp(name, "GetVolumeInformationA")) return (void *)GetVolumeInformationA;
	else if (0 == strcmp(name, "GetVolumeInformationW")) return (void *)GetVolumeInformationW;
	else if (0 == strcmp(name, "GetWindowsDirectoryA")) return (void *)GetWindowsDirectoryA;
	else if (0 == strcmp(name, "GetWindowsDirectoryW")) return (void *)GetWindowsDirectoryW;
	else if (0 == strcmp(name, "GlobalAddAtomA")) return (void *)GlobalAddAtomA;
	else if (0 == strcmp(name, "GlobalAddAtomW")) return (void *)GlobalAddAtomW;
	else if (0 == strcmp(name, "GlobalAlloc")) return (void *)GlobalAlloc;
	else if (0 == strcmp(name, "GlobalCompact")) return (void *)GlobalCompact;
	else if (0 == strcmp(name, "GlobalDeleteAtom")) return (void *)GlobalDeleteAtom;
	else if (0 == strcmp(name, "GlobalFindAtomA")) return (void *)GlobalFindAtomA;
	else if (0 == strcmp(name, "GlobalFindAtomW")) return (void *)GlobalFindAtomW;
	else if (0 == strcmp(name, "GlobalFix")) return (void *)GlobalFix;
	else if (0 == strcmp(name, "GlobalFlags")) return (void *)GlobalFlags;
	else if (0 == strcmp(name, "GlobalFree")) return (void *)GlobalFree;
	else if (0 == strcmp(name, "GlobalGetAtomNameA")) return (void *)GlobalGetAtomNameA;
	else if (0 == strcmp(name, "GlobalGetAtomNameW")) return (void *)GlobalGetAtomNameW;
	else if (0 == strcmp(name, "GlobalHandle")) return (void *)GlobalHandle;
	else if (0 == strcmp(name, "GlobalLock")) return (void *)GlobalLock;
	else if (0 == strcmp(name, "GlobalMemoryStatus")) return (void *)GlobalMemoryStatus;
	else if (0 == strcmp(name, "GlobalReAlloc")) return (void *)GlobalReAlloc;
	else if (0 == strcmp(name, "GlobalSize")) return (void *)GlobalSize;
	else if (0 == strcmp(name, "GlobalUnWire")) return (void *)GlobalUnWire;
	else if (0 == strcmp(name, "GlobalUnfix")) return (void *)GlobalUnfix;
	else if (0 == strcmp(name, "GlobalUnlock")) return (void *)GlobalUnlock;
	else if (0 == strcmp(name, "GlobalWire")) return (void *)GlobalWire;
	else if (0 == strcmp(name, "Heap32First")) return (void *)Heap32First;
	else if (0 == strcmp(name, "Heap32ListFirst")) return (void *)Heap32ListFirst;
	else if (0 == strcmp(name, "Heap32ListNext")) return (void *)Heap32ListNext;
	else if (0 == strcmp(name, "Heap32Next")) return (void *)Heap32Next;
	else if (0 == strcmp(name, "HeapAlloc")) return (void *)HeapAlloc;
	else if (0 == strcmp(name, "HeapCompact")) return (void *)HeapCompact;
	else if (0 == strcmp(name, "HeapCreate")) return (void *)HeapCreate;
	else if (0 == strcmp(name, "HeapDestroy")) return (void *)HeapDestroy;
	else if (0 == strcmp(name, "HeapFree")) return (void *)HeapFree;
	else if (0 == strcmp(name, "HeapLock")) return (void *)HeapLock;
	else if (0 == strcmp(name, "HeapReAlloc")) return (void *)HeapReAlloc;
	else if (0 == strcmp(name, "HeapSize")) return (void *)HeapSize;
	else if (0 == strcmp(name, "HeapUnlock")) return (void *)HeapUnlock;
	else if (0 == strcmp(name, "HeapValidate")) return (void *)HeapValidate;
	else if (0 == strcmp(name, "HeapWalk")) return (void *)HeapWalk;
	else if (0 == strcmp(name, "InitAtomTable")) return (void *)InitAtomTable;
	else if (0 == strcmp(name, "InitializeCriticalSection")) return (void *)InitializeCriticalSection;
	else if (0 == strcmp(name, "InterlockedCompareExchange")) return (void *)InterlockedCompareExchange;
	else if (0 == strcmp(name, "InterlockedDecrement")) return (void *)InterlockedDecrement;
	else if (0 == strcmp(name, "InterlockedExchange")) return (void *)InterlockedExchange;
	else if (0 == strcmp(name, "InterlockedExchangeAdd")) return (void *)InterlockedExchangeAdd;
	else if (0 == strcmp(name, "InterlockedIncrement")) return (void *)InterlockedIncrement;
	else if (0 == strcmp(name, "IsBadCodePtr")) return (void *)IsBadCodePtr;
	else if (0 == strcmp(name, "IsBadHugeReadPtr")) return (void *)IsBadHugeReadPtr;
	else if (0 == strcmp(name, "IsBadHugeWritePtr")) return (void *)IsBadHugeWritePtr;
	else if (0 == strcmp(name, "IsBadReadPtr")) return (void *)IsBadReadPtr;
	else if (0 == strcmp(name, "IsBadStringPtrA")) return (void *)IsBadStringPtrA;
	else if (0 == strcmp(name, "IsBadStringPtrW")) return (void *)IsBadStringPtrW;
	else if (0 == strcmp(name, "IsBadWritePtr")) return (void *)IsBadWritePtr;
	else if (0 == strcmp(name, "IsDBCSLeadByte")) return (void *)IsDBCSLeadByte;
	else if (0 == strcmp(name, "IsDBCSLeadByteEx")) return (void *)IsDBCSLeadByteEx;
	else if (0 == strcmp(name, "IsDebuggerPresent")) return (void *)IsDebuggerPresent;
	else if (0 == strcmp(name, "IsProcessorFeaturePresent")) return (void *)IsProcessorFeaturePresent;
	else if (0 == strcmp(name, "IsValidCodePage")) return (void *)IsValidCodePage;
	else if (0 == strcmp(name, "IsValidLocale")) return (void *)IsValidLocale;
	else if (0 == strcmp(name, "LCMapStringA")) return (void *)LCMapStringA;
	else if (0 == strcmp(name, "LCMapStringW")) return (void *)LCMapStringW;
	else if (0 == strcmp(name, "LeaveCriticalSection")) return (void *)LeaveCriticalSection;
	else if (0 == strcmp(name, "LoadLibraryA")) return (void *)LoadLibraryA;
	else if (0 == strcmp(name, "LoadLibraryExA")) return (void *)LoadLibraryExA;
	else if (0 == strcmp(name, "LoadLibraryExW")) return (void *)LoadLibraryExW;
	else if (0 == strcmp(name, "LoadLibraryW")) return (void *)LoadLibraryW;
	else if (0 == strcmp(name, "LoadModule")) return (void *)LoadModule;
	else if (0 == strcmp(name, "LoadResource")) return (void *)LoadResource;
	else if (0 == strcmp(name, "LocalAlloc")) return (void *)LocalAlloc;
	else if (0 == strcmp(name, "LocalCompact")) return (void *)LocalCompact;
	else if (0 == strcmp(name, "LocalFileTimeToFileTime")) return (void *)LocalFileTimeToFileTime;
	else if (0 == strcmp(name, "LocalFlags")) return (void *)LocalFlags;
	else if (0 == strcmp(name, "LocalFree")) return (void *)LocalFree;
	else if (0 == strcmp(name, "LocalHandle")) return (void *)LocalHandle;
	else if (0 == strcmp(name, "LocalLock")) return (void *)LocalLock;
	else if (0 == strcmp(name, "LocalReAlloc")) return (void *)LocalReAlloc;
	else if (0 == strcmp(name, "LocalShrink")) return (void *)LocalShrink;
	else if (0 == strcmp(name, "LocalSize")) return (void *)LocalSize;
	else if (0 == strcmp(name, "LocalUnlock")) return (void *)LocalUnlock;
	else if (0 == strcmp(name, "LockFile")) return (void *)LockFile;
	else if (0 == strcmp(name, "LockFileEx")) return (void *)LockFileEx;
	else if (0 == strcmp(name, "LockResource")) return (void *)LockResource;
	else if (0 == strcmp(name, "MapViewOfFile")) return (void *)MapViewOfFile;
	else if (0 == strcmp(name, "MapViewOfFileEx")) return (void *)MapViewOfFileEx;
	else if (0 == strcmp(name, "MoveFileA")) return (void *)MoveFileA;
	else if (0 == strcmp(name, "MoveFileW")) return (void *)MoveFileW;
	else if (0 == strcmp(name, "MoveFileExA")) return (void *)MoveFileExA;
	else if (0 == strcmp(name, "MoveFileExW")) return (void *)MoveFileExW;
	else if (0 == strcmp(name, "MulDiv")) return (void *)MulDiv;
	else if (0 == strcmp(name, "MultiByteToWideChar")) return (void *)MultiByteToWideChar;
	else if (0 == strcmp(name, "OpenEventA")) return (void *)OpenEventA;
	else if (0 == strcmp(name, "OpenEventW")) return (void *)OpenEventW;
	else if (0 == strcmp(name, "OpenFile")) return (void *)OpenFile;
	else if (0 == strcmp(name, "OpenFileMappingA")) return (void *)OpenFileMappingA;
	else if (0 == strcmp(name, "OpenFileMappingW")) return (void *)OpenFileMappingW;
	else if (0 == strcmp(name, "OpenMutexA")) return (void *)OpenMutexA;
	else if (0 == strcmp(name, "OpenMutexW")) return (void *)OpenMutexW;
	else if (0 == strcmp(name, "OpenProcess")) return (void *)OpenProcess;
	else if (0 == strcmp(name, "OpenSemaphoreA")) return (void *)OpenSemaphoreA;
	else if (0 == strcmp(name, "OpenSemaphoreW")) return (void *)OpenSemaphoreW;
	else if (0 == strcmp(name, "OpenWaitableTimerA")) return (void *)OpenWaitableTimerA;
	else if (0 == strcmp(name, "OpenWaitableTimerW")) return (void *)OpenWaitableTimerW;
	else if (0 == strcmp(name, "OutputDebugStringA")) return (void *)OutputDebugStringA;
	else if (0 == strcmp(name, "OutputDebugStringW")) return (void *)OutputDebugStringW;
	else if (0 == strcmp(name, "PeekConsoleInputA")) return (void *)PeekConsoleInputA;
	else if (0 == strcmp(name, "PeekConsoleInputW")) return (void *)PeekConsoleInputW;
	else if (0 == strcmp(name, "PeekNamedPipe")) return (void *)PeekNamedPipe;
	else if (0 == strcmp(name, "PostQueuedCompletionStatus")) return (void *)PostQueuedCompletionStatus;
	else if (0 == strcmp(name, "PrepareTape")) return (void *)PrepareTape;
	else if (0 == strcmp(name, "PulseEvent")) return (void *)PulseEvent;
	else if (0 == strcmp(name, "PurgeComm")) return (void *)PurgeComm;
	else if (0 == strcmp(name, "QueryDosDeviceA")) return (void *)QueryDosDeviceA;
	else if (0 == strcmp(name, "QueryDosDeviceW")) return (void *)QueryDosDeviceW;
	else if (0 == strcmp(name, "QueryPerformanceCounter")) return (void *)QueryPerformanceCounter;
	else if (0 == strcmp(name, "QueryPerformanceFrequency")) return (void *)QueryPerformanceFrequency;
	else if (0 == strcmp(name, "QueueUserAPC")) return (void *)QueueUserAPC;
	else if (0 == strcmp(name, "RaiseException")) return (void *)RaiseException;
	else if (0 == strcmp(name, "ReadConsoleA")) return (void *)ReadConsoleA;
	else if (0 == strcmp(name, "ReadConsoleInputA")) return (void *)ReadConsoleInputA;
	else if (0 == strcmp(name, "ReadConsoleInputW")) return (void *)ReadConsoleInputW;
	else if (0 == strcmp(name, "ReadConsoleOutputA")) return (void *)ReadConsoleOutputA;
	else if (0 == strcmp(name, "ReadConsoleOutputAttribute")) return (void *)ReadConsoleOutputAttribute;
	else if (0 == strcmp(name, "ReadConsoleOutputCharacterA")) return (void *)ReadConsoleOutputCharacterA;
	else if (0 == strcmp(name, "ReadConsoleOutputCharacterW")) return (void *)ReadConsoleOutputCharacterW;
	else if (0 == strcmp(name, "ReadConsoleOutputW")) return (void *)ReadConsoleOutputW;
	else if (0 == strcmp(name, "ReadConsoleW")) return (void *)ReadConsoleW;
	else if (0 == strcmp(name, "ReadDirectoryChangesW")) return (void *)ReadDirectoryChangesW;
	else if (0 == strcmp(name, "ReadFile")) return (void *)ReadFile;
	else if (0 == strcmp(name, "ReadFileEx")) return (void *)ReadFileEx;
	else if (0 == strcmp(name, "ReadProcessMemory")) return (void *)ReadProcessMemory;
	else if (0 == strcmp(name, "ReleaseMutex")) return (void *)ReleaseMutex;
	else if (0 == strcmp(name, "ReleaseSemaphore")) return (void *)ReleaseSemaphore;
	else if (0 == strcmp(name, "RemoveDirectoryA")) return (void *)RemoveDirectoryA;
	else if (0 == strcmp(name, "RemoveDirectoryW")) return (void *)RemoveDirectoryW;
	else if (0 == strcmp(name, "ResetEvent")) return (void *)ResetEvent;
	else if (0 == strcmp(name, "ResumeThread")) return (void *)ResumeThread;
	else if (0 == strcmp(name, "RtlUnwind")) return (void *)RtlUnwind;
	else if (0 == strcmp(name, "ScrollConsoleScreenBufferA")) return (void *)ScrollConsoleScreenBufferA;
	else if (0 == strcmp(name, "ScrollConsoleScreenBufferW")) return (void *)ScrollConsoleScreenBufferW;
	else if (0 == strcmp(name, "SearchPathA")) return (void *)SearchPathA;
	else if (0 == strcmp(name, "SearchPathW")) return (void *)SearchPathW;
	else if (0 == strcmp(name, "SetCommBreak")) return (void *)SetCommBreak;
	else if (0 == strcmp(name, "SetCommConfig")) return (void *)SetCommConfig;
	else if (0 == strcmp(name, "SetCommMask")) return (void *)SetCommMask;
	else if (0 == strcmp(name, "SetCommState")) return (void *)SetCommState;
	else if (0 == strcmp(name, "SetCommTimeouts")) return (void *)SetCommTimeouts;
	else if (0 == strcmp(name, "SetComputerNameA")) return (void *)SetComputerNameA;
	else if (0 == strcmp(name, "SetComputerNameW")) return (void *)SetComputerNameW;
	else if (0 == strcmp(name, "SetConsoleActiveScreenBuffer")) return (void *)SetConsoleActiveScreenBuffer;
	else if (0 == strcmp(name, "SetConsoleCP")) return (void *)SetConsoleCP;
	else if (0 == strcmp(name, "SetConsoleCtrlHandler")) return (void *)SetConsoleCtrlHandler;
	else if (0 == strcmp(name, "SetConsoleCursorInfo")) return (void *)SetConsoleCursorInfo;
	else if (0 == strcmp(name, "SetConsoleCursorPosition")) return (void *)SetConsoleCursorPosition;
	else if (0 == strcmp(name, "SetConsoleMode")) return (void *)SetConsoleMode;
	else if (0 == strcmp(name, "SetConsoleOutputCP")) return (void *)SetConsoleOutputCP;
	else if (0 == strcmp(name, "SetConsoleScreenBufferSize")) return (void *)SetConsoleScreenBufferSize;
	else if (0 == strcmp(name, "SetConsoleTextAttribute")) return (void *)SetConsoleTextAttribute;
	else if (0 == strcmp(name, "SetConsoleTitleA")) return (void *)SetConsoleTitleA;
	else if (0 == strcmp(name, "SetConsoleTitleW")) return (void *)SetConsoleTitleW;
	else if (0 == strcmp(name, "SetConsoleWindowInfo")) return (void *)SetConsoleWindowInfo;
	else if (0 == strcmp(name, "SetCurrentDirectoryA")) return (void *)SetCurrentDirectoryA;
	else if (0 == strcmp(name, "SetCurrentDirectoryW")) return (void *)SetCurrentDirectoryW;
	else if (0 == strcmp(name, "SetDefaultCommConfigA")) return (void *)SetDefaultCommConfigA;
	else if (0 == strcmp(name, "SetDefaultCommConfigW")) return (void *)SetDefaultCommConfigW;
	else if (0 == strcmp(name, "SetEndOfFile")) return (void *)SetEndOfFile;
	else if (0 == strcmp(name, "SetEnvironmentVariableA")) return (void *)SetEnvironmentVariableA;
	else if (0 == strcmp(name, "SetEnvironmentVariableW")) return (void *)SetEnvironmentVariableW;
	else if (0 == strcmp(name, "SetErrorMode")) return (void *)SetErrorMode;
	else if (0 == strcmp(name, "SetEvent")) return (void *)SetEvent;
	else if (0 == strcmp(name, "SetFileApisToANSI")) return (void *)SetFileApisToANSI;
	else if (0 == strcmp(name, "SetFileApisToOEM")) return (void *)SetFileApisToOEM;
	else if (0 == strcmp(name, "SetFileAttributesA")) return (void *)SetFileAttributesA;
	else if (0 == strcmp(name, "SetFileAttributesW")) return (void *)SetFileAttributesW;
	else if (0 == strcmp(name, "SetFilePointer")) return (void *)SetFilePointer;
	else if (0 == strcmp(name, "SetFileTime")) return (void *)SetFileTime;
	else if (0 == strcmp(name, "SetHandleCount")) return (void *)SetHandleCount;
	else if (0 == strcmp(name, "SetHandleInformation")) return (void *)SetHandleInformation;
	else if (0 == strcmp(name, "SetLastError")) return (void *)SetLastError;
	else if (0 == strcmp(name, "SetLocalTime")) return (void *)SetLocalTime;
	else if (0 == strcmp(name, "SetLocaleInfoA")) return (void *)SetLocaleInfoA;
	else if (0 == strcmp(name, "SetLocaleInfoW")) return (void *)SetLocaleInfoW;
	else if (0 == strcmp(name, "SetMailslotInfo")) return (void *)SetMailslotInfo;
	else if (0 == strcmp(name, "SetNamedPipeHandleState")) return (void *)SetNamedPipeHandleState;
	else if (0 == strcmp(name, "SetPriorityClass")) return (void *)SetPriorityClass;
	else if (0 == strcmp(name, "SetProcessAffinityMask")) return (void *)SetProcessAffinityMask;
	else if (0 == strcmp(name, "SetProcessPriorityBoost")) return (void *)SetProcessPriorityBoost;
	else if (0 == strcmp(name, "SetProcessShutdownParameters")) return (void *)SetProcessShutdownParameters;
	else if (0 == strcmp(name, "SetProcessWorkingSetSize")) return (void *)SetProcessWorkingSetSize;
	else if (0 == strcmp(name, "SetStdHandle")) return (void *)SetStdHandle;
	else if (0 == strcmp(name, "SetSystemPowerState")) return (void *)SetSystemPowerState;
	else if (0 == strcmp(name, "SetSystemTime")) return (void *)SetSystemTime;
	else if (0 == strcmp(name, "SetSystemTimeAdjustment")) return (void *)SetSystemTimeAdjustment;
	else if (0 == strcmp(name, "SetTapeParameters")) return (void *)SetTapeParameters;
	else if (0 == strcmp(name, "SetTapePosition")) return (void *)SetTapePosition;
	else if (0 == strcmp(name, "SetThreadAffinityMask")) return (void *)SetThreadAffinityMask;
	else if (0 == strcmp(name, "SetThreadContext")) return (void *)SetThreadContext;
	else if (0 == strcmp(name, "SetThreadIdealProcessor")) return (void *)SetThreadIdealProcessor;
	else if (0 == strcmp(name, "SetThreadLocale")) return (void *)SetThreadLocale;
	else if (0 == strcmp(name, "SetThreadPriority")) return (void *)SetThreadPriority;
	else if (0 == strcmp(name, "SetThreadPriorityBoost")) return (void *)SetThreadPriorityBoost;
	else if (0 == strcmp(name, "SetTimeZoneInformation")) return (void *)SetTimeZoneInformation;
	else if (0 == strcmp(name, "SetUnhandledExceptionFilter")) return (void *)SetUnhandledExceptionFilter;
	else if (0 == strcmp(name, "SetVolumeLabelA")) return (void *)SetVolumeLabelA;
	else if (0 == strcmp(name, "SetVolumeLabelW")) return (void *)SetVolumeLabelW;
	else if (0 == strcmp(name, "SetWaitableTimer")) return (void *)SetWaitableTimer;
	else if (0 == strcmp(name, "SetupComm")) return (void *)SetupComm;
	else if (0 == strcmp(name, "SignalObjectAndWait")) return (void *)SignalObjectAndWait;
	else if (0 == strcmp(name, "SizeofResource")) return (void *)SizeofResource;
	else if (0 == strcmp(name, "Sleep")) return (void *)Sleep;
	else if (0 == strcmp(name, "SleepEx")) return (void *)SleepEx;
	else if (0 == strcmp(name, "SuspendThread")) return (void *)SuspendThread;
	else if (0 == strcmp(name, "SwitchToFiber")) return (void *)SwitchToFiber;
	else if (0 == strcmp(name, "SwitchToThread")) return (void *)SwitchToThread;
	else if (0 == strcmp(name, "SystemTimeToFileTime")) return (void *)SystemTimeToFileTime;
	else if (0 == strcmp(name, "SystemTimeToTzSpecificLocalTime")) return (void *)SystemTimeToTzSpecificLocalTime;
	else if (0 == strcmp(name, "TerminateProcess")) return (void *)TerminateProcess;
	else if (0 == strcmp(name, "TerminateThread")) return (void *)TerminateThread;
	else if (0 == strcmp(name, "TlsAlloc")) return (void *)TlsAlloc;
	else if (0 == strcmp(name, "TlsFree")) return (void *)TlsFree;
	else if (0 == strcmp(name, "TlsGetValue")) return (void *)TlsGetValue;
	else if (0 == strcmp(name, "TlsSetValue")) return (void *)TlsSetValue;
	else if (0 == strcmp(name, "TransactNamedPipe")) return (void *)TransactNamedPipe;
	else if (0 == strcmp(name, "TransmitCommChar")) return (void *)TransmitCommChar;
	else if (0 == strcmp(name, "TryEnterCriticalSection")) return (void *)TryEnterCriticalSection;
	else if (0 == strcmp(name, "UnhandledExceptionFilter")) return (void *)UnhandledExceptionFilter;
	else if (0 == strcmp(name, "UnlockFile")) return (void *)UnlockFile;
	else if (0 == strcmp(name, "UnlockFileEx")) return (void *)UnlockFileEx;
	else if (0 == strcmp(name, "UnmapViewOfFile")) return (void *)UnmapViewOfFile;
	else if (0 == strcmp(name, "UpdateResourceA")) return (void *)UpdateResourceA;
	else if (0 == strcmp(name, "UpdateResourceW")) return (void *)UpdateResourceW;
	else if (0 == strcmp(name, "VerLanguageNameA")) return (void *)VerLanguageNameA;
	else if (0 == strcmp(name, "VerLanguageNameW")) return (void *)VerLanguageNameW;
	else if (0 == strcmp(name, "VirtualAlloc")) return (void *)VirtualAlloc;
	else if (0 == strcmp(name, "VirtualFree")) return (void *)VirtualFree;
	else if (0 == strcmp(name, "VirtualFreeEx")) return (void *)VirtualFreeEx;
	else if (0 == strcmp(name, "VirtualLock")) return (void *)VirtualLock;
	else if (0 == strcmp(name, "VirtualProtect")) return (void *)VirtualProtect;
	else if (0 == strcmp(name, "VirtualProtectEx")) return (void *)VirtualProtectEx;
	else if (0 == strcmp(name, "VirtualQuery")) return (void *)VirtualQuery;
	else if (0 == strcmp(name, "VirtualQueryEx")) return (void *)VirtualQueryEx;
	else if (0 == strcmp(name, "VirtualUnlock")) return (void *)VirtualUnlock;
	else if (0 == strcmp(name, "WaitCommEvent")) return (void *)WaitCommEvent;
	else if (0 == strcmp(name, "WaitForDebugEvent")) return (void *)WaitForDebugEvent;
	else if (0 == strcmp(name, "WaitForMultipleObjects")) return (void *)WaitForMultipleObjects;
	else if (0 == strcmp(name, "WaitForMultipleObjectsEx")) return (void *)WaitForMultipleObjectsEx;
	else if (0 == strcmp(name, "WaitForSingleObject")) return (void *)WaitForSingleObject;
	else if (0 == strcmp(name, "WaitForSingleObjectEx")) return (void *)WaitForSingleObjectEx;
	else if (0 == strcmp(name, "WaitNamedPipeA")) return (void *)WaitNamedPipeA;
	else if (0 == strcmp(name, "WaitNamedPipeW")) return (void *)WaitNamedPipeW;
	else if (0 == strcmp(name, "WideCharToMultiByte")) return (void *)WideCharToMultiByte;
	else if (0 == strcmp(name, "WinExec")) return (void *)WinExec;
	else if (0 == strcmp(name, "WriteConsoleA")) return (void *)WriteConsoleA;
	else if (0 == strcmp(name, "WriteConsoleInputA")) return (void *)WriteConsoleInputA;
	else if (0 == strcmp(name, "WriteConsoleInputW")) return (void *)WriteConsoleInputW;
	else if (0 == strcmp(name, "WriteConsoleOutputA")) return (void *)WriteConsoleOutputA;
	else if (0 == strcmp(name, "WriteConsoleOutputAttribute")) return (void *)WriteConsoleOutputAttribute;
	else if (0 == strcmp(name, "WriteConsoleOutputCharacterA")) return (void *)WriteConsoleOutputCharacterA;
	else if (0 == strcmp(name, "WriteConsoleOutputCharacterW")) return (void *)WriteConsoleOutputCharacterW;
	else if (0 == strcmp(name, "WriteConsoleOutputW")) return (void *)WriteConsoleOutputW;
	else if (0 == strcmp(name, "WriteConsoleW")) return (void *)WriteConsoleW;
	else if (0 == strcmp(name, "WriteFile")) return (void *)WriteFile;
	else if (0 == strcmp(name, "WriteFileEx")) return (void *)WriteFileEx;
	else if (0 == strcmp(name, "WritePrivateProfileSectionA")) return (void *)WritePrivateProfileSectionA;
	else if (0 == strcmp(name, "WritePrivateProfileSectionW")) return (void *)WritePrivateProfileSectionW;
	else if (0 == strcmp(name, "WritePrivateProfileStringA")) return (void *)WritePrivateProfileStringA;
	else if (0 == strcmp(name, "WritePrivateProfileStringW")) return (void *)WritePrivateProfileStringW;
	else if (0 == strcmp(name, "WritePrivateProfileStructA")) return (void *)WritePrivateProfileStructA;
	else if (0 == strcmp(name, "WritePrivateProfileStructW")) return (void *)WritePrivateProfileStructW;
	else if (0 == strcmp(name, "WriteProcessMemory")) return (void *)WriteProcessMemory;
	else if (0 == strcmp(name, "WriteProfileSectionA")) return (void *)WriteProfileSectionA;
	else if (0 == strcmp(name, "WriteProfileSectionW")) return (void *)WriteProfileSectionW;
	else if (0 == strcmp(name, "WriteProfileStringA")) return (void *)WriteProfileStringA;
	else if (0 == strcmp(name, "WriteProfileStringW")) return (void *)WriteProfileStringW;
	else if (0 == strcmp(name, "WriteTapemark")) return (void *)WriteTapemark;
	else if (0 == strcmp(name, "_hread")) return (void *)_hread;
	else if (0 == strcmp(name, "_hwrite")) return (void *)_hwrite;
	else if (0 == strcmp(name, "_lclose")) return (void *)_lclose;
	else if (0 == strcmp(name, "_lcreat")) return (void *)_lcreat;
	else if (0 == strcmp(name, "_llseek")) return (void *)_llseek;
	else if (0 == strcmp(name, "_lopen")) return (void *)_lopen;
	else if (0 == strcmp(name, "_lread")) return (void *)_lread;
	else if (0 == strcmp(name, "_lwrite")) return (void *)_lwrite;
	else if (0 == strcmp(name, "lstrcatA")) return (void *)lstrcatA;
	else if (0 == strcmp(name, "lstrcatW")) return (void *)lstrcatW;
	else if (0 == strcmp(name, "lstrcmpA")) return (void *)lstrcmpA;
	else if (0 == strcmp(name, "lstrcmpW")) return (void *)lstrcmpW;
	else if (0 == strcmp(name, "lstrcmpiA")) return (void *)lstrcmpiA;
	else if (0 == strcmp(name, "lstrcmpiW")) return (void *)lstrcmpiW;
	else if (0 == strcmp(name, "lstrcpyA")) return (void *)lstrcpyA;
	else if (0 == strcmp(name, "lstrcpyW")) return (void *)lstrcpyW;
	else if (0 == strcmp(name, "lstrcpynA")) return (void *)lstrcpynA;
	else if (0 == strcmp(name, "lstrcpynW")) return (void *)lstrcpynW;
	else if (0 == strcmp(name, "lstrlenA")) return (void *)lstrlenA;
	else if (0 == strcmp(name, "lstrlenW")) return (void *)lstrlenW;
	return NULL;
}
