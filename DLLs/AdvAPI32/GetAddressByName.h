void *
GetAddressByName
(const char *name)
{
	if (NULL == name) return NULL;
	else if (0 == strcmp(name, "AbortSystemShutdownA")) return (void *)AbortSystemShutdownA;
	else if (0 == strcmp(name, "AbortSystemShutdownW")) return (void *)AbortSystemShutdownW;
	else if (0 == strcmp(name, "AccessCheck")) return (void *)AccessCheck;
	else if (0 == strcmp(name, "AccessCheckAndAuditAlarmA")) return (void *)AccessCheckAndAuditAlarmA;
	else if (0 == strcmp(name, "AccessCheckAndAuditAlarmW")) return (void *)AccessCheckAndAuditAlarmW;
	else if (0 == strcmp(name, "AddAccessAllowedAce")) return (void *)AddAccessAllowedAce;
	else if (0 == strcmp(name, "AddAccessDeniedAce")) return (void *)AddAccessDeniedAce;
	else if (0 == strcmp(name, "AddAce")) return (void *)AddAce;
	else if (0 == strcmp(name, "AddAuditAccessAce")) return (void *)AddAuditAccessAce;
	else if (0 == strcmp(name, "AdjustTokenGroups")) return (void *)AdjustTokenGroups;
	else if (0 == strcmp(name, "AdjustTokenPrivileges")) return (void *)AdjustTokenPrivileges;
	else if (0 == strcmp(name, "AllocateAndInitializeSid")) return (void *)AllocateAndInitializeSid;
	else if (0 == strcmp(name, "AllocateLocallyUniqueId")) return (void *)AllocateLocallyUniqueId;
	else if (0 == strcmp(name, "AreAllAccessesGranted")) return (void *)AreAllAccessesGranted;
	else if (0 == strcmp(name, "AreAnyAccessesGranted")) return (void *)AreAnyAccessesGranted;
	else if (0 == strcmp(name, "BackupEventLogA")) return (void *)BackupEventLogA;
	else if (0 == strcmp(name, "BackupEventLogW")) return (void *)BackupEventLogW;
	else if (0 == strcmp(name, "ChangeServiceConfigA")) return (void *)ChangeServiceConfigA;
	else if (0 == strcmp(name, "ChangeServiceConfigW")) return (void *)ChangeServiceConfigW;
	else if (0 == strcmp(name, "ClearEventLogA")) return (void *)ClearEventLogA;
	else if (0 == strcmp(name, "ClearEventLogW")) return (void *)ClearEventLogW;
	else if (0 == strcmp(name, "CloseEventLog")) return (void *)CloseEventLog;
	else if (0 == strcmp(name, "CloseServiceHandle")) return (void *)CloseServiceHandle;
	else if (0 == strcmp(name, "ControlService")) return (void *)ControlService;
	else if (0 == strcmp(name, "CopySid")) return (void *)CopySid;
	else if (0 == strcmp(name, "CreatePrivateObjectSecurity")) return (void *)CreatePrivateObjectSecurity;
	else if (0 == strcmp(name, "CreateProcessAsUserA")) return (void *)CreateProcessAsUserA;
	else if (0 == strcmp(name, "CreateProcessAsUserW")) return (void *)CreateProcessAsUserW;
	else if (0 == strcmp(name, "CreateServiceA")) return (void *)CreateServiceA;
	else if (0 == strcmp(name, "CreateServiceW")) return (void *)CreateServiceW;
	else if (0 == strcmp(name, "CryptAcquireContextA")) return (void *)CryptAcquireContextA;
	else if (0 == strcmp(name, "CryptAcquireContextW")) return (void *)CryptAcquireContextW;
	else if (0 == strcmp(name, "CryptCreateHash")) return (void *)CryptCreateHash;
	else if (0 == strcmp(name, "CryptDecrypt")) return (void *)CryptDecrypt;
	else if (0 == strcmp(name, "CryptDeriveKey")) return (void *)CryptDeriveKey;
	else if (0 == strcmp(name, "CryptDestroyHash")) return (void *)CryptDestroyHash;
	else if (0 == strcmp(name, "CryptDestroyKey")) return (void *)CryptDestroyKey;
	else if (0 == strcmp(name, "CryptEncrypt")) return (void *)CryptEncrypt;
	else if (0 == strcmp(name, "CryptExportKey")) return (void *)CryptExportKey;
	else if (0 == strcmp(name, "CryptGenKey")) return (void *)CryptGenKey;
	else if (0 == strcmp(name, "CryptGenRandom")) return (void *)CryptGenRandom;
	else if (0 == strcmp(name, "CryptGetHashParam")) return (void *)CryptGetHashParam;
	else if (0 == strcmp(name, "CryptGetKeyParam")) return (void *)CryptGetKeyParam;
	else if (0 == strcmp(name, "CryptGetProvParam")) return (void *)CryptGetProvParam;
	else if (0 == strcmp(name, "CryptGetUserKey")) return (void *)CryptGetUserKey;
	else if (0 == strcmp(name, "CryptHashData")) return (void *)CryptHashData;
	else if (0 == strcmp(name, "CryptHashSessionKey")) return (void *)CryptHashSessionKey;
	else if (0 == strcmp(name, "CryptImportKey")) return (void *)CryptImportKey;
	else if (0 == strcmp(name, "CryptReleaseContext")) return (void *)CryptReleaseContext;
	else if (0 == strcmp(name, "CryptSetHashParam")) return (void *)CryptSetHashParam;
	else if (0 == strcmp(name, "CryptSetKeyParam")) return (void *)CryptSetKeyParam;
	else if (0 == strcmp(name, "CryptSetProvParam")) return (void *)CryptSetProvParam;
	else if (0 == strcmp(name, "CryptSetProviderA")) return (void *)CryptSetProviderA;
	else if (0 == strcmp(name, "CryptSetProviderW")) return (void *)CryptSetProviderW;
	else if (0 == strcmp(name, "CryptSignHashA")) return (void *)CryptSignHashA;
	else if (0 == strcmp(name, "CryptSignHashW")) return (void *)CryptSignHashW;
	else if (0 == strcmp(name, "CryptVerifySignatureA")) return (void *)CryptVerifySignatureA;
	else if (0 == strcmp(name, "CryptVerifySignatureW")) return (void *)CryptVerifySignatureW;
	else if (0 == strcmp(name, "DeleteAce")) return (void *)DeleteAce;
	else if (0 == strcmp(name, "DeleteService")) return (void *)DeleteService;
	else if (0 == strcmp(name, "DeregisterEventSource")) return (void *)DeregisterEventSource;
	else if (0 == strcmp(name, "DestroyPrivateObjectSecurity")) return (void *)DestroyPrivateObjectSecurity;
	else if (0 == strcmp(name, "DuplicateToken")) return (void *)DuplicateToken;
	else if (0 == strcmp(name, "DuplicateTokenEx")) return (void *)DuplicateTokenEx;
	else if (0 == strcmp(name, "EnumDependentServicesA")) return (void *)EnumDependentServicesA;
	else if (0 == strcmp(name, "EnumDependentServicesW")) return (void *)EnumDependentServicesW;
	else if (0 == strcmp(name, "EnumServicesStatusA")) return (void *)EnumServicesStatusA;
	else if (0 == strcmp(name, "EnumServicesStatusW")) return (void *)EnumServicesStatusW;
	else if (0 == strcmp(name, "EqualPrefixSid")) return (void *)EqualPrefixSid;
	else if (0 == strcmp(name, "EqualSid")) return (void *)EqualSid;
	else if (0 == strcmp(name, "FindFirstFreeAce")) return (void *)FindFirstFreeAce;
	else if (0 == strcmp(name, "FreeSid")) return (void *)FreeSid;
	else if (0 == strcmp(name, "GetAce")) return (void *)GetAce;
	else if (0 == strcmp(name, "GetAclInformation")) return (void *)GetAclInformation;
	else if (0 == strcmp(name, "GetFileSecurityA")) return (void *)GetFileSecurityA;
	else if (0 == strcmp(name, "GetFileSecurityW")) return (void *)GetFileSecurityW;
	else if (0 == strcmp(name, "GetKernelObjectSecurity")) return (void *)GetKernelObjectSecurity;
	else if (0 == strcmp(name, "GetLengthSid")) return (void *)GetLengthSid;
	else if (0 == strcmp(name, "GetNumberOfEventLogRecords")) return (void *)GetNumberOfEventLogRecords;
	else if (0 == strcmp(name, "GetOldestEventLogRecord")) return (void *)GetOldestEventLogRecord;
	else if (0 == strcmp(name, "GetPrivateObjectSecurity")) return (void *)GetPrivateObjectSecurity;
	else if (0 == strcmp(name, "GetSecurityDescriptorControl")) return (void *)GetSecurityDescriptorControl;
	else if (0 == strcmp(name, "GetSecurityDescriptorDacl")) return (void *)GetSecurityDescriptorDacl;
	else if (0 == strcmp(name, "GetSecurityDescriptorGroup")) return (void *)GetSecurityDescriptorGroup;
	else if (0 == strcmp(name, "GetSecurityDescriptorLength")) return (void *)GetSecurityDescriptorLength;
	else if (0 == strcmp(name, "GetSecurityDescriptorOwner")) return (void *)GetSecurityDescriptorOwner;
	else if (0 == strcmp(name, "GetSecurityDescriptorSacl")) return (void *)GetSecurityDescriptorSacl;
	else if (0 == strcmp(name, "GetServiceDisplayNameA")) return (void *)GetServiceDisplayNameA;
	else if (0 == strcmp(name, "GetServiceDisplayNameW")) return (void *)GetServiceDisplayNameW;
	else if (0 == strcmp(name, "GetServiceKeyNameA")) return (void *)GetServiceKeyNameA;
	else if (0 == strcmp(name, "GetServiceKeyNameW")) return (void *)GetServiceKeyNameW;
	else if (0 == strcmp(name, "GetSidIdentifierAuthority")) return (void *)GetSidIdentifierAuthority;
	else if (0 == strcmp(name, "GetSidLengthRequired")) return (void *)GetSidLengthRequired;
	else if (0 == strcmp(name, "GetSidSubAuthority")) return (void *)GetSidSubAuthority;
	else if (0 == strcmp(name, "GetSidSubAuthorityCount")) return (void *)GetSidSubAuthorityCount;
	else if (0 == strcmp(name, "GetTokenInformation")) return (void *)GetTokenInformation;
	else if (0 == strcmp(name, "GetUserNameW")) return (void *)GetUserNameW;
	else if (0 == strcmp(name, "ImpersonateLoggedOnUser")) return (void *)ImpersonateLoggedOnUser;
	else if (0 == strcmp(name, "ImpersonateNamedPipeClient")) return (void *)ImpersonateNamedPipeClient;
	else if (0 == strcmp(name, "ImpersonateSelf")) return (void *)ImpersonateSelf;
	else if (0 == strcmp(name, "InitializeAcl")) return (void *)InitializeAcl;
	else if (0 == strcmp(name, "InitializeSecurityDescriptor")) return (void *)InitializeSecurityDescriptor;
	else if (0 == strcmp(name, "InitiateSystemShutdownA")) return (void *)InitiateSystemShutdownA;
	else if (0 == strcmp(name, "InitiateSystemShutdownW")) return (void *)InitiateSystemShutdownW;
	else if (0 == strcmp(name, "IsTextUnicode")) return (void *)IsTextUnicode;
	else if (0 == strcmp(name, "IsValidAcl")) return (void *)IsValidAcl;
	else if (0 == strcmp(name, "IsValidSecurityDescriptor")) return (void *)IsValidSecurityDescriptor;
	else if (0 == strcmp(name, "IsValidSid")) return (void *)IsValidSid;
	else if (0 == strcmp(name, "LockServiceDatabase")) return (void *)LockServiceDatabase;
	else if (0 == strcmp(name, "LogonUserA")) return (void *)LogonUserA;
	else if (0 == strcmp(name, "LogonUserW")) return (void *)LogonUserW;
	else if (0 == strcmp(name, "LookupAccountNameA")) return (void *)LookupAccountNameA;
	else if (0 == strcmp(name, "LookupAccountNameW")) return (void *)LookupAccountNameW;
	else if (0 == strcmp(name, "LookupAccountSidA")) return (void *)LookupAccountSidA;
	else if (0 == strcmp(name, "LookupAccountSidW")) return (void *)LookupAccountSidW;
	else if (0 == strcmp(name, "LookupPrivilegeDisplayNameA")) return (void *)LookupPrivilegeDisplayNameA;
	else if (0 == strcmp(name, "LookupPrivilegeDisplayNameW")) return (void *)LookupPrivilegeDisplayNameW;
	else if (0 == strcmp(name, "LookupPrivilegeNameA")) return (void *)LookupPrivilegeNameA;
	else if (0 == strcmp(name, "LookupPrivilegeNameW")) return (void *)LookupPrivilegeNameW;
	else if (0 == strcmp(name, "LookupPrivilegeValueA")) return (void *)LookupPrivilegeValueA;
	else if (0 == strcmp(name, "LookupPrivilegeValueW")) return (void *)LookupPrivilegeValueW;
	else if (0 == strcmp(name, "MakeAbsoluteSD")) return (void *)MakeAbsoluteSD;
	else if (0 == strcmp(name, "MakeSelfRelativeSD")) return (void *)MakeSelfRelativeSD;
	else if (0 == strcmp(name, "MapGenericMask")) return (void *)MapGenericMask;
	else if (0 == strcmp(name, "NotifyBootConfigStatus")) return (void *)NotifyBootConfigStatus;
	else if (0 == strcmp(name, "NotifyChangeEventLog")) return (void *)NotifyChangeEventLog;
	else if (0 == strcmp(name, "ObjectCloseAuditAlarmA")) return (void *)ObjectCloseAuditAlarmA;
	else if (0 == strcmp(name, "ObjectCloseAuditAlarmW")) return (void *)ObjectCloseAuditAlarmW;
	else if (0 == strcmp(name, "ObjectDeleteAuditAlarmA")) return (void *)ObjectDeleteAuditAlarmA;
	else if (0 == strcmp(name, "ObjectDeleteAuditAlarmW")) return (void *)ObjectDeleteAuditAlarmW;
	else if (0 == strcmp(name, "ObjectOpenAuditAlarmA")) return (void *)ObjectOpenAuditAlarmA;
	else if (0 == strcmp(name, "ObjectOpenAuditAlarmW")) return (void *)ObjectOpenAuditAlarmW;
	else if (0 == strcmp(name, "ObjectPrivilegeAuditAlarmA")) return (void *)ObjectPrivilegeAuditAlarmA;
	else if (0 == strcmp(name, "ObjectPrivilegeAuditAlarmW")) return (void *)ObjectPrivilegeAuditAlarmW;
	else if (0 == strcmp(name, "OpenBackupEventLogA")) return (void *)OpenBackupEventLogA;
	else if (0 == strcmp(name, "OpenBackupEventLogW")) return (void *)OpenBackupEventLogW;
	else if (0 == strcmp(name, "OpenEventLogW")) return (void *)OpenEventLogW;
	else if (0 == strcmp(name, "OpenProcessToken")) return (void *)OpenProcessToken;
	else if (0 == strcmp(name, "OpenSCManagerA")) return (void *)OpenSCManagerA;
	else if (0 == strcmp(name, "OpenSCManagerW")) return (void *)OpenSCManagerW;
	else if (0 == strcmp(name, "OpenServiceA")) return (void *)OpenServiceA;
	else if (0 == strcmp(name, "OpenServiceW")) return (void *)OpenServiceW;
	else if (0 == strcmp(name, "OpenThreadToken")) return (void *)OpenThreadToken;
	else if (0 == strcmp(name, "PrivilegedServiceAuditAlarmA")) return (void *)PrivilegedServiceAuditAlarmA;
	else if (0 == strcmp(name, "PrivilegedServiceAuditAlarmW")) return (void *)PrivilegedServiceAuditAlarmW;
	else if (0 == strcmp(name, "QueryServiceConfigA")) return (void *)QueryServiceConfigA;
	else if (0 == strcmp(name, "QueryServiceConfigW")) return (void *)QueryServiceConfigW;
	else if (0 == strcmp(name, "QueryServiceLockStatusA")) return (void *)QueryServiceLockStatusA;
	else if (0 == strcmp(name, "QueryServiceLockStatusW")) return (void *)QueryServiceLockStatusW;
	else if (0 == strcmp(name, "QueryServiceObjectSecurity")) return (void *)QueryServiceObjectSecurity;
	else if (0 == strcmp(name, "QueryServiceStatus")) return (void *)QueryServiceStatus;
	else if (0 == strcmp(name, "ReadEventLogA")) return (void *)ReadEventLogA;
	else if (0 == strcmp(name, "ReadEventLogW")) return (void *)ReadEventLogW;
	else if (0 == strcmp(name, "RegCloseKey")) return (void *)RegCloseKey;
	else if (0 == strcmp(name, "RegConnectRegistryA")) return (void *)RegConnectRegistryA;
	else if (0 == strcmp(name, "RegConnectRegistryW")) return (void *)RegConnectRegistryW;
	else if (0 == strcmp(name, "RegCreateKeyA")) return (void *)RegCreateKeyA;
	else if (0 == strcmp(name, "RegCreateKeyExA")) return (void *)RegCreateKeyExA;
	else if (0 == strcmp(name, "RegCreateKeyExW")) return (void *)RegCreateKeyExW;
	else if (0 == strcmp(name, "RegCreateKeyW")) return (void *)RegCreateKeyW;
	else if (0 == strcmp(name, "RegDeleteKeyA")) return (void *)RegDeleteKeyA;
	else if (0 == strcmp(name, "RegDeleteKeyW")) return (void *)RegDeleteKeyW;
	else if (0 == strcmp(name, "RegDeleteValueA")) return (void *)RegDeleteValueA;
	else if (0 == strcmp(name, "RegDeleteValueW")) return (void *)RegDeleteValueW;
	else if (0 == strcmp(name, "RegEnumKeyA")) return (void *)RegEnumKeyA;
	else if (0 == strcmp(name, "RegEnumKeyExA")) return (void *)RegEnumKeyExA;
	else if (0 == strcmp(name, "RegEnumKeyExW")) return (void *)RegEnumKeyExW;
	else if (0 == strcmp(name, "RegEnumKeyW")) return (void *)RegEnumKeyW;
	else if (0 == strcmp(name, "RegEnumValueA")) return (void *)RegEnumValueA;
	else if (0 == strcmp(name, "RegEnumValueW")) return (void *)RegEnumValueW;
	else if (0 == strcmp(name, "RegFlushKey")) return (void *)RegFlushKey;
	else if (0 == strcmp(name, "RegGetKeySecurity")) return (void *)RegGetKeySecurity;
	else if (0 == strcmp(name, "RegLoadKeyA")) return (void *)RegLoadKeyA;
	else if (0 == strcmp(name, "RegLoadKeyW")) return (void *)RegLoadKeyW;
	else if (0 == strcmp(name, "RegNotifyChangeKeyValue")) return (void *)RegNotifyChangeKeyValue;
	else if (0 == strcmp(name, "RegOpenKeyA")) return (void *)RegOpenKeyA;
	else if (0 == strcmp(name, "RegOpenKeyExA")) return (void *)RegOpenKeyExA;
	else if (0 == strcmp(name, "RegOpenKeyExW")) return (void *)RegOpenKeyExW;
	else if (0 == strcmp(name, "RegOpenKeyW")) return (void *)RegOpenKeyW;
	else if (0 == strcmp(name, "RegQueryInfoKeyA")) return (void *)RegQueryInfoKeyA;
	else if (0 == strcmp(name, "RegQueryInfoKeyW")) return (void *)RegQueryInfoKeyW;
	else if (0 == strcmp(name, "RegQueryMultipleValuesA")) return (void *)RegQueryMultipleValuesA;
	else if (0 == strcmp(name, "RegQueryMultipleValuesW")) return (void *)RegQueryMultipleValuesW;
	else if (0 == strcmp(name, "RegQueryValueA")) return (void *)RegQueryValueA;
	else if (0 == strcmp(name, "RegQueryValueExA")) return (void *)RegQueryValueExA;
	else if (0 == strcmp(name, "RegQueryValueExW")) return (void *)RegQueryValueExW;
	else if (0 == strcmp(name, "RegQueryValueW")) return (void *)RegQueryValueW;
	else if (0 == strcmp(name, "RegReplaceKeyA")) return (void *)RegReplaceKeyA;
	else if (0 == strcmp(name, "RegReplaceKeyW")) return (void *)RegReplaceKeyW;
	else if (0 == strcmp(name, "RegRestoreKeyA")) return (void *)RegRestoreKeyA;
	else if (0 == strcmp(name, "RegRestoreKeyW")) return (void *)RegRestoreKeyW;
	else if (0 == strcmp(name, "RegSaveKeyA")) return (void *)RegSaveKeyA;
	else if (0 == strcmp(name, "RegSaveKeyW")) return (void *)RegSaveKeyW;
	else if (0 == strcmp(name, "RegSetKeySecurity")) return (void *)RegSetKeySecurity;
	else if (0 == strcmp(name, "RegSetValueA")) return (void *)RegSetValueA;
	else if (0 == strcmp(name, "RegSetValueExA")) return (void *)RegSetValueExA;
	else if (0 == strcmp(name, "RegSetValueExW")) return (void *)RegSetValueExW;
	else if (0 == strcmp(name, "RegSetValueW")) return (void *)RegSetValueW;
	else if (0 == strcmp(name, "RegUnLoadKeyA")) return (void *)RegUnLoadKeyA;
	else if (0 == strcmp(name, "RegUnLoadKeyW")) return (void *)RegUnLoadKeyW;
	else if (0 == strcmp(name, "RegisterEventSourceW")) return (void *)RegisterEventSourceW;
	else if (0 == strcmp(name, "RegisterServiceCtrlHandlerA")) return (void *)RegisterServiceCtrlHandlerA;
	else if (0 == strcmp(name, "RegisterServiceCtrlHandlerW")) return (void *)RegisterServiceCtrlHandlerW;
	else if (0 == strcmp(name, "ReportEventA")) return (void *)ReportEventA;
	else if (0 == strcmp(name, "ReportEventW")) return (void *)ReportEventW;
	else if (0 == strcmp(name, "RevertToSelf")) return (void *)RevertToSelf;
	else if (0 == strcmp(name, "SetAclInformation")) return (void *)SetAclInformation;
	else if (0 == strcmp(name, "SetFileSecurityA")) return (void *)SetFileSecurityA;
	else if (0 == strcmp(name, "SetFileSecurityW")) return (void *)SetFileSecurityW;
	else if (0 == strcmp(name, "SetKernelObjectSecurity")) return (void *)SetKernelObjectSecurity;
	else if (0 == strcmp(name, "SetPrivateObjectSecurity")) return (void *)SetPrivateObjectSecurity;
	else if (0 == strcmp(name, "SetSecurityDescriptorDacl")) return (void *)SetSecurityDescriptorDacl;
	else if (0 == strcmp(name, "SetSecurityDescriptorGroup")) return (void *)SetSecurityDescriptorGroup;
	else if (0 == strcmp(name, "SetSecurityDescriptorOwner")) return (void *)SetSecurityDescriptorOwner;
	else if (0 == strcmp(name, "SetSecurityDescriptorSacl")) return (void *)SetSecurityDescriptorSacl;
	else if (0 == strcmp(name, "SetServiceObjectSecurity")) return (void *)SetServiceObjectSecurity;
	else if (0 == strcmp(name, "SetServiceStatus")) return (void *)SetServiceStatus;
	else if (0 == strcmp(name, "SetTokenInformation")) return (void *)SetTokenInformation;
	else if (0 == strcmp(name, "StartServiceA")) return (void *)StartServiceA;
	else if (0 == strcmp(name, "StartServiceCtrlDispatcherA")) return (void *)StartServiceCtrlDispatcherA;
	else if (0 == strcmp(name, "StartServiceCtrlDispatcherW")) return (void *)StartServiceCtrlDispatcherW;
	else if (0 == strcmp(name, "StartServiceW")) return (void *)StartServiceW;
	else if (0 == strcmp(name, "UnlockServiceDatabase")) return (void *)UnlockServiceDatabase;
	else if (0 == strcmp(name, "WinLoadTrustProvider")) return (void *)WinLoadTrustProvider;
	return NULL;
}
