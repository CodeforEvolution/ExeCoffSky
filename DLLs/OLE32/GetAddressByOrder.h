void *
GetAddressByOrder
(int order)
{
	switch (order) {
	case 9:	return (void*)BindMoniker;
	case 10:	return (void*)CLIPFORMAT_UserFree;
	case 11:	return (void*)CLIPFORMAT_UserMarshal;
	case 12:	return (void*)CLIPFORMAT_UserSize;
	case 13:	return (void*)CLIPFORMAT_UserUnmarshal;
	case 14:	return (void*)CLSIDFromProgID;
	case 15:	return (void*)CLSIDFromProgIDEx;
	case 16:	return (void*)CLSIDFromString;
	case 17:	return (void*)CoAddRefServerProcess;
//	case 18:	return (void*)CoAllowSetForegroundWindow;
	case 19:	return (void*)CoBuildVersion;
	case 20:	return (void*)CoCancelCall;
	case 21:	return (void*)CoCopyProxy;
	case 22:	return (void*)CoCreateFreeThreadedMarshaler;
	case 23:	return (void*)CoCreateGuid;
	case 24:	return (void*)CoCreateInstance;
	case 25:	return (void*)CoCreateInstanceEx;
//	case 26:	return (void*)CoCreateObjectInContext;
//	case 27:	return (void*)CoDeactivateObject;
//	case 28:	return (void*)CoDisableCallCancellation;
	case 29:	return (void*)CoDisconnectObject;
	case 30:	return (void*)CoDosDateTimeToFileTime;
//	case 31:	return (void*)CoEnableCallCancellation;
	case 32:	return (void*)CoFileTimeNow;
	case 33:	return (void*)CoFileTimeToDosDateTime;
	case 34:	return (void*)CoFreeAllLibraries;
	case 35:	return (void*)CoFreeLibrary;
	case 36:	return (void*)CoFreeUnusedLibraries;
//	case 37:	return (void*)CoGetApartmentID;
	case 38:	return (void*)CoGetCallContext;
//	case 39:	return (void*)CoGetCallerTID;
	case 40:	return (void*)CoGetCancelObject;
	case 41:	return (void*)CoGetClassObject;
//	case 42:	return (void*)CoGetClassVersion;
//	case 43:	return (void*)CoGetCurrentLogicalThreadId;
	case 44:	return (void*)CoGetCurrentProcess;
	case 45:	return (void*)CoGetInstanceFromFile;
	case 46:	return (void*)CoGetInstanceFromIStorage;
	case 47:	return (void*)CoGetInterfaceAndReleaseStream;
	case 48:	return (void*)CoGetMalloc;
	case 49:	return (void*)CoGetMarshalSizeMax;
	case 50:	return (void*)CoGetObject;
//	case 51:	return (void*)CoGetObjectContext;
	case 52:	return (void*)CoGetPSClsid;
	case 53:	return (void*)CoGetStandardMarshal;
//	case 54:	return (void*)CoGetState;
	case 55:	return (void*)CoGetStdMarshalEx;
	case 56:	return (void*)CoGetTreatAsClass;
	case 57:	return (void*)CoImpersonateClient;
	case 58:	return (void*)CoInitialize;
	case 59:	return (void*)CoInitializeEx;
	case 60:	return (void*)CoInitializeSecurity;
//	case 61:	return (void*)CoInitializeWOW;
	case 62:	return (void*)CoInstall;
	case 63:	return (void*)CoIsHandlerConnected;
	case 64:	return (void*)CoIsOle1Class;
	case 65:	return (void*)CoLoadLibrary;
	case 66:	return (void*)CoLockObjectExternal;
	case 67:	return (void*)CoMarshalHresult;
	case 68:	return (void*)CoMarshalInterThreadInterfaceInStream;
	case 69:	return (void*)CoMarshalInterface;
	case 70:	return (void*)CoQueryAuthenticationServices;
	case 71:	return (void*)CoQueryClientBlanket;
	case 72:	return (void*)CoQueryProxyBlanket;
//	case 73:	return (void*)CoQueryReleaseObject;
//	case 74:	return (void*)CoReactivateObject;
	case 75:	return (void*)CoRegisterChannelHook;
	case 76:	return (void*)CoRegisterClassObject;
	case 77:	return (void*)CoRegisterMallocSpy;
	case 78:	return (void*)CoRegisterMessageFilter;
	case 79:	return (void*)CoRegisterPSClsid;
	case 80:	return (void*)CoRegisterSurrogate;
//	case 81:	return (void*)CoRegisterSurrogateEx;
	case 82:	return (void*)CoReleaseMarshalData;
	case 83:	return (void*)CoReleaseServerProcess;
	case 84:	return (void*)CoResumeClassObjects;
	case 85:	return (void*)CoRevertToSelf;
	case 86:	return (void*)CoRevokeClassObject;
	case 87:	return (void*)CoRevokeMallocSpy;
	case 88:	return (void*)CoSetCancelObject;
	case 89:	return (void*)CoSetProxyBlanket;
//	case 90:	return (void*)CoSetState;
	case 91:	return (void*)CoSuspendClassObjects;
	case 92:	return (void*)CoSwitchCallContext;
	case 93:	return (void*)CoTaskMemAlloc;
	case 94:	return (void*)CoTaskMemFree;
	case 95:	return (void*)CoTaskMemRealloc;
	case 96:	return (void*)CoTestCancel;
	case 97:	return (void*)CoTreatAsClass;
	case 98:	return (void*)CoUninitialize;
//	case 99:	return (void*)CoUnloadingWOW;
	case 100:	return (void*)CoUnmarshalHresult;
	case 101:	return (void*)CoUnmarshalInterface;
//	case 102:	return (void*)CoWaitForMultipleHandles;
	case 103:	return (void*)CreateAntiMoniker;
	case 104:	return (void*)CreateBindCtx;
	case 105:	return (void*)CreateClassMoniker;
	case 106:	return (void*)CreateDataAdviseHolder;
	case 107:	return (void*)CreateDataCache;
	case 108:	return (void*)CreateErrorInfo;
	case 109:	return (void*)CreateFileMoniker;
	case 110:	return (void*)CreateGenericComposite;
	case 111:	return (void*)CreateILockBytesOnHGlobal;
	case 112:	return (void*)CreateItemMoniker;
//	case 113:	return (void*)CreateObjrefMoniker;
	case 114:	return (void*)CreateOleAdviseHolder;
	case 115:	return (void*)CreatePointerMoniker;
	case 116:	return (void*)CreateStdProgressIndicator;
	case 117:	return (void*)CreateStreamOnHGlobal;
//	case 118:	return (void*)DcomChannelSetHResult;
//	case 119:	return (void*)DllDebugObjectRPCHook;
	case 120:	return (void*)DllGetClassObject;
//	case 121:	return (void*)DllGetClassObjectWOW;
	case 122:	return (void*)DllRegisterServer;
	case 123:	return (void*)DoDragDrop;
//	case 124:	return (void*)EnableHookObject;
	case 125:	return (void*)FmtIdToPropStgName;
	case 126:	return (void*)FreePropVariantArray;
	case 127:	return (void*)GetClassFile;
	case 128:	return (void*)GetConvertStg;
//	case 129:	return (void*)GetDocumentBitStg;
	case 130:	return (void*)GetErrorInfo;
	case 131:	return (void*)GetHGlobalFromILockBytes;
	case 132:	return (void*)GetHGlobalFromStream;
//	case 133:	return (void*)GetHookInterface;
	case 134:	return (void*)GetRunningObjectTable;
	case 135:	return (void*)HACCEL_UserFree;
	case 136:	return (void*)HACCEL_UserMarshal;
	case 137:	return (void*)HACCEL_UserSize;
	case 138:	return (void*)HACCEL_UserUnmarshal;
	case 139:	return (void*)HBITMAP_UserFree;
	case 140:	return (void*)HBITMAP_UserMarshal;
	case 141:	return (void*)HBITMAP_UserSize;
	case 142:	return (void*)HBITMAP_UserUnmarshal;
//	case 143:	return (void*)HBRUSH_UserFree;
//	case 144:	return (void*)HBRUSH_UserMarshal;
//	case 145:	return (void*)HBRUSH_UserSize;
//	case 146:	return (void*)HBRUSH_UserUnmarshal;
	case 147:	return (void*)HDC_UserFree;
	case 148:	return (void*)HDC_UserMarshal;
	case 149:	return (void*)HDC_UserSize;
	case 150:	return (void*)HDC_UserUnmarshal;
//	case 151:	return (void*)HENHMETAFILE_UserFree;
//	case 152:	return (void*)HENHMETAFILE_UserMarshal;
//	case 153:	return (void*)HENHMETAFILE_UserSize;
//	case 154:	return (void*)HENHMETAFILE_UserUnmarshal;
	case 155:	return (void*)HGLOBAL_UserFree;
	case 156:	return (void*)HGLOBAL_UserMarshal;
	case 157:	return (void*)HGLOBAL_UserSize;
	case 158:	return (void*)HGLOBAL_UserUnmarshal;
	case 159:	return (void*)HICON_UserFree;
	case 160:	return (void*)HICON_UserMarshal;
	case 161:	return (void*)HICON_UserSize;
	case 162:	return (void*)HICON_UserUnmarshal;
	case 163:	return (void*)HMENU_UserFree;
	case 164:	return (void*)HMENU_UserMarshal;
	case 165:	return (void*)HMENU_UserSize;
	case 166:	return (void*)HMENU_UserUnmarshal;
//	case 167:	return (void*)HMETAFILEPICT_UserFree;
//	case 168:	return (void*)HMETAFILEPICT_UserMarshal;
//	case 169:	return (void*)HMETAFILEPICT_UserSize;
//	case 170:	return (void*)HMETAFILEPICT_UserUnmarshal;
//	case 171:	return (void*)HMETAFILE_UserFree;
//	case 172:	return (void*)HMETAFILE_UserMarshal;
//	case 173:	return (void*)HMETAFILE_UserSize;
//	case 174:	return (void*)HMETAFILE_UserUnmarshal;
	case 175:	return (void*)HPALETTE_UserFree;
	case 176:	return (void*)HPALETTE_UserMarshal;
	case 177:	return (void*)HPALETTE_UserSize;
	case 178:	return (void*)HPALETTE_UserUnmarshal;
	case 179:	return (void*)HWND_UserFree;
	case 180:	return (void*)HWND_UserMarshal;
	case 181:	return (void*)HWND_UserSize;
	case 182:	return (void*)HWND_UserUnmarshal;
//	case 183:	return (void*)HkOleRegisterObject;
	case 184:	return (void*)IIDFromString;
	case 185:	return (void*)IsAccelerator;
	case 186:	return (void*)IsEqualGUID;
//	case 187:	return (void*)IsValidIid;
//	case 188:	return (void*)IsValidInterface;
//	case 189:	return (void*)IsValidPtrIn;
//	case 190:	return (void*)IsValidPtrOut;
	case 191:	return (void*)MkParseDisplayName;
	case 192:	return (void*)MonikerCommonPrefixWith;
	case 193:	return (void*)MonikerRelativePathTo;
	case 194:	return (void*)OleBuildVersion;
	case 195:	return (void*)OleConvertIStorageToOLESTREAM;
	case 196:	return (void*)OleConvertIStorageToOLESTREAMEx;
	case 197:	return (void*)OleConvertOLESTREAMToIStorage;
	case 198:	return (void*)OleConvertOLESTREAMToIStorageEx;
	case 199:	return (void*)OleCreate;
	case 200:	return (void*)OleCreateDefaultHandler;
	case 201:	return (void*)OleCreateEmbeddingHelper;
	case 202:	return (void*)OleCreateEx;
	case 203:	return (void*)OleCreateFromData;
	case 204:	return (void*)OleCreateFromDataEx;
	case 205:	return (void*)OleCreateFromFile;
	case 206:	return (void*)OleCreateFromFileEx;
	case 207:	return (void*)OleCreateLink;
	case 208:	return (void*)OleCreateLinkEx;
	case 209:	return (void*)OleCreateLinkFromData;
	case 210:	return (void*)OleCreateLinkFromDataEx;
	case 211:	return (void*)OleCreateLinkToFile;
	case 212:	return (void*)OleCreateLinkToFileEx;
	case 213:	return (void*)OleCreateMenuDescriptor;
	case 214:	return (void*)OleCreateStaticFromData;
	case 215:	return (void*)OleDestroyMenuDescriptor;
	case 216:	return (void*)OleDoAutoConvert;
	case 217:	return (void*)OleDraw;
	case 218:	return (void*)OleDuplicateData;
	case 219:	return (void*)OleFlushClipboard;
	case 220:	return (void*)OleGetAutoConvert;
	case 221:	return (void*)OleGetClipboard;
	case 222:	return (void*)OleGetIconOfClass;
	case 223:	return (void*)OleGetIconOfFile;
	case 224:	return (void*)OleInitialize;
//	case 225:	return (void*)OleInitializeWOW;
	case 226:	return (void*)OleIsCurrentClipboard;
	case 227:	return (void*)OleIsRunning;
	case 228:	return (void*)OleLoad;
	case 229:	return (void*)OleLoadFromStream;
	case 230:	return (void*)OleLockRunning;
	case 231:	return (void*)OleMetafilePictFromIconAndLabel;
	case 232:	return (void*)OleNoteObjectVisible;
	case 233:	return (void*)OleQueryCreateFromData;
	case 234:	return (void*)OleQueryLinkFromData;
	case 235:	return (void*)OleRegEnumFormatEtc;
	case 236:	return (void*)OleRegEnumVerbs;
	case 237:	return (void*)OleRegGetMiscStatus;
	case 238:	return (void*)OleRegGetUserType;
	case 239:	return (void*)OleRun;
	case 240:	return (void*)OleSave;
	case 241:	return (void*)OleSaveToStream;
	case 242:	return (void*)OleSetAutoConvert;
	case 243:	return (void*)OleSetClipboard;
	case 244:	return (void*)OleSetContainedObject;
	case 245:	return (void*)OleSetMenuDescriptor;
	case 246:	return (void*)OleTranslateAccelerator;
	case 247:	return (void*)OleUninitialize;
//	case 248:	return (void*)OpenOrCreateStream;
	case 249:	return (void*)ProgIDFromCLSID;
	case 250:	return (void*)PropStgNameToFmtId;
//	case 251:	return (void*)PropSysAllocString;
//	case 252:	return (void*)PropSysFreeString;
//	case 1:	return (void*)PropVariantChangeType;
	case 253:	return (void*)PropVariantClear;
	case 254:	return (void*)PropVariantCopy;
	case 255:	return (void*)ReadClassStg;
	case 256:	return (void*)ReadClassStm;
	case 257:	return (void*)ReadFmtUserTypeStg;
//	case 258:	return (void*)ReadOleStg;
//	case 259:	return (void*)ReadStringStream;
	case 260:	return (void*)RegisterDragDrop;
	case 261:	return (void*)ReleaseStgMedium;
	case 262:	return (void*)RevokeDragDrop;
	case 263:	return (void*)SNB_UserFree;
	case 264:	return (void*)SNB_UserMarshal;
	case 265:	return (void*)SNB_UserSize;
	case 266:	return (void*)SNB_UserUnmarshal;
	case 267:	return (void*)STGMEDIUM_UserFree;
	case 268:	return (void*)STGMEDIUM_UserMarshal;
	case 269:	return (void*)STGMEDIUM_UserSize;
	case 270:	return (void*)STGMEDIUM_UserUnmarshal;
	case 271:	return (void*)SetConvertStg;
//	case 272:	return (void*)SetDocumentBitStg;
	case 273:	return (void*)SetErrorInfo;
//	case 2:	return (void*)StgConvertPropertyToVariant;
//	case 3:	return (void*)StgConvertVariantToProperty;
	case 274:	return (void*)StgCreateDocfile;
	case 275:	return (void*)StgCreateDocfileOnILockBytes;
	case 276:	return (void*)StgCreatePropSetStg;
	case 277:	return (void*)StgCreatePropStg;
	case 278:	return (void*)StgCreateStorageEx;
	case 279:	return (void*)StgGetIFillLockBytesOnFile;
	case 280:	return (void*)StgGetIFillLockBytesOnILockBytes;
	case 281:	return (void*)StgIsStorageFile;
	case 282:	return (void*)StgIsStorageILockBytes;
	case 283:	return (void*)StgOpenAsyncDocfileOnIFillLockBytes;
	case 284:	return (void*)StgOpenPropStg;
	case 285:	return (void*)StgOpenStorage;
	case 286:	return (void*)StgOpenStorageEx;
//	case 287:	return (void*)StgOpenStorageOnHandle;
	case 288:	return (void*)StgOpenStorageOnILockBytes;
//	case 4:	return (void*)StgPropertyLengthAsVariant;
	case 289:	return (void*)StgSetTimes;
	case 290:	return (void*)StringFromCLSID;
	case 291:	return (void*)StringFromGUID2;
	case 292:	return (void*)StringFromIID;
//	case 293:	return (void*)UpdateDCOMSettings;
//	case 294:	return (void*)UtConvertDvtd16toDvtd32;
//	case 295:	return (void*)UtConvertDvtd32toDvtd16;
//	case 296:	return (void*)UtGetDvtd16Info;
//	case 297:	return (void*)UtGetDvtd32Info;
//	case 5:	return (void*)WdtpInterfacePointer_UserFree;
//	case 6:	return (void*)WdtpInterfacePointer_UserMarshal;
//	case 7:	return (void*)WdtpInterfacePointer_UserSize;
//	case 8:	return (void*)WdtpInterfacePointer_UserUnmarshal;
	case 298:	return (void*)WriteClassStg;
	case 299:	return (void*)WriteClassStm;
	case 300:	return (void*)WriteFmtUserTypeStg;
//	case 301:	return (void*)WriteOleStg;
//	case 302:	return (void*)WriteStringStream;
	}
	return NULL;
}
